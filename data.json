{
    "1": {
        "question": "A sum fetched a total simple interest of Rs. 4016.25 in 5 years. Calculate the principal amount when the rate is x% pa (get x value from user input). Answer should be up to two decimal places.\n\n\n\n\nSample Input: 10\n\nSample Output: 8032.50",
        "answer": "import java.util.Scanner;\n\npublic class PrincipalCalculator {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        double si = 4016.25; // Simple Interest\n        int time = 5;        // Time in years\n\n        System.out.print(\"Enter rate of interest (in %): \");\n        double rate = sc.nextDouble();\n\n        // Formula: SI = (P * R * T) / 100\n        double principal = (si * 100) / (rate * time);\n\n        System.out.printf(\"Principal Amount: %.2f\", principal);\n    }\n}\n"
    },
    "2": {
        "question": "Given a positive integer n, print the absolute difference between n and 21 if n is less than 21, otherwise print double the absolute difference.\n\n\n\n\nSample Input: 17\n\nSample Output: 4\n\n\n\n\nSample Input: 30\n\nSample Output: 18",
        "answer": "import java.util.Scanner;\n\npublic class DifferenceCalculator {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();   // Input number\n        int diff = Math.abs(n - 21);\n\n        if (n > 21) {\n            diff = diff * 2;\n        }\n\n        System.out.println(diff);\n    }\n}\n"
    },
    "3": {
        "question": "Question :  \nFor this year's IPL, write a program that takes team names and the scores of 11 batsmen from the 2 teams (total 22 batsmen) and prints the name of the team which won (highest score) along with the score of the man-of-the-match (person with highest score).\nInput:\n1st line will contain team name of 1st team.\nNext 11 lines will contain scores of batsmen in team 1.\nNext line will contain team name of 2nd team.\nNext 11 lines will contain scores of batsmen in team 2.\nOutput: \nName of the team which won Score of the man-of-the-match\nSample Input: \nKKR\n11 45 65 78 52 12 65 74 85 35 11\nMI\n52 41 96 32 45 52 36 74 46 14 52\nOutput: \nMI\n96",
        "answer": "import java.util.*;\n\npublic class IPLMatch {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Team 1 input\n        String team1 = sc.nextLine();\n        int[] scores1 = new int[11];\n        int sum1 = 0;\n        for (int i = 0; i < 11; i++) {\n            scores1[i] = sc.nextInt();\n            sum1 += scores1[i];\n        }\n\n        sc.nextLine(); // consume newline\n\n        // Team 2 input\n        String team2 = sc.nextLine();\n        int[] scores2 = new int[11];\n        int sum2 = 0;\n        for (int i = 0; i < 11; i++) {\n            scores2[i] = sc.nextInt();\n            sum2 += scores2[i];\n        }\n\n        // Find man of the match (highest score among all players)\n        int maxScore = Math.max(Arrays.stream(scores1).max().getAsInt(),\n                                Arrays.stream(scores2).max().getAsInt());\n\n        // Decide winner\n        String winner = (sum1 > sum2) ? team1 : team2;\n\n        // Output\n        System.out.println(winner);\n        System.out.println(maxScore);\n    }\n}\n"
    },
    "4": {
        "question": "Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Use the method Math.abs(num) to compute the absolute value of a number.\nExpected Input:\n6 4\nExpected Output:\ntrue\nExpected Input:\n7 -1\nExpected Output:\ntrue",
        "answer": "import java.util.Scanner;\n\npublic class SixChecker {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n\n        boolean result = (a == 6 || b == 6 || (a + b == 6) || (Math.abs(a - b) == 6));\n\n        System.out.println(result);\n    }\n}\n"
    },
    "5": {
        "question": "Get Array size and elements, replace the even numbers in an array by its corresponding index value.\n Sample input:\n5\n1 2 3 4 5\nSample output: \n1 1 3 3 5\nExplanation:\n5 is the array size and 1, 2, 3, 4, and 5 are the elements of the array. The even numbers in the array are 2 and 4, the index of the element 2 is 1 and for 4 it is 3.\nHence the output is: 1 1 3 3 5",
        "answer": "import java.util.Scanner;\n\npublic class ReplaceEvenWithIndex {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt(); // array size\n        int[] arr = new int[n];\n\n        // input array elements\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        // replace even numbers with their index\n        for (int i = 0; i < n; i++) {\n            if (arr[i] % 2 == 0) {\n                arr[i] = i;\n            }\n        }\n\n        // print result\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n"
    },
    "6": {
        "question": "Question :  \nGiven a string, write a program to remove all the vowels and print the remaining string Sample Input - education Sample Output - dctn",
        "answer": "import java.util.Scanner;\n\npublic class RemoveVowels {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        String str = sc.nextLine();  // input string\n        String result = str.replaceAll(\"[AEIOUaeiou]\", \"\"); // remove vowels\n\n        System.out.println(result);\n    }\n}\n"
    },
    "7": {
        "question": "You have received TCS gems worth Rs. C. You can see a catalogue L of all available items. From this list you can select two items that add up to Rs. C. The solution you provide will consist of the two integers indicating the positions of the items in your list (smaller number first).\nInput Specification:\nThe first line of input gives the number of cases, N.\nFor each test case there will be: One line containing the value C - the value of gems awarded to you\nAnother line containing the value I, the list of items in the catalogue\nAnother line containing a space separated list of I integers. Each integer P indicates the price of an item in the store. (You will find only 2 items adding up to C in any list)\nOutput Specification:\nFor each test case, output consists of one line containing the indices of the two items whose price adds up to C. The lower index should be output first.\nHint: Assume the starting index is 1.\nSample Input:\n3\n100\n3\n5 75 25\n200\n7\n150 24 79 50 88 345 3\n8\n8\n2 1 9 4 4 56 90 3\nSample Output:\n2 3\n1 4\n4 5",
        "answer": "import java.util.*;\n\npublic class TCSGems {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int N = sc.nextInt(); // number of test cases\n\n        for (int t = 0; t < N; t++) {\n            int C = sc.nextInt();   // value of gems\n            int I = sc.nextInt();   // number of items\n            int[] arr = new int[I];\n\n            for (int i = 0; i < I; i++) {\n                arr[i] = sc.nextInt();\n            }\n\n            // HashMap to store value -> index\n            Map<Integer, Integer> map = new HashMap<>();\n\n            int idx1 = -1, idx2 = -1;\n\n            for (int i = 0; i < I; i++) {\n                int price = arr[i];\n                int complement = C - price;\n\n                if (map.containsKey(complement)) {\n                    idx1 = map.get(complement) + 1; // convert to 1-based index\n                    idx2 = i + 1;\n                    break;\n                }\n                map.put(price, i);\n            }\n\n            // Ensure lower index comes first\n            if (idx1 < idx2) {\n                System.out.println(idx1 + \" \" + idx2);\n            } else {\n                System.out.println(idx2 + \" \" + idx1);\n            }\n        }\n    }\n}\n"
    },
    "8": {
        "question": "A word is said to be a doubloon if every letter that appears in the word appears exactly twice.\nFor example, the following are all the doubloons I found in my dictionary.\nAbba, Anna, appall, appearer, appeases, arraigning, beriberi, bilabial, Caucasus, coco, Dada, deed, Emmett, Hannah, horseshoer, intestines\nWrite a program to check whether the given words are doubloon or not.\nInput specification:\nFirst line is to accept \"number of words\" from 2nd line it should accept \"n\" number of words and print the result in the format \"givenword is/not a doubloon\"\n Sample Output1:\n4\nAbba\nAnna\nappall\njava\nSample Output: \nAbba is a doubloon\nAnna is a doubloon\nappall is a doubloon\njava is not a doubloon",
        "answer": "import java.util.*;\n\npublic class DoubloonChecker {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();  // number of words\n        sc.nextLine(); // consume newline\n\n        for (int i = 0; i < n; i++) {\n            String word = sc.nextLine();\n            if (isDoubloon(word)) {\n                System.out.println(word + \" is a doubloon\");\n            } else {\n                System.out.println(word + \" is not a doubloon\");\n            }\n        }\n    }\n\n    // Function to check if word is a doubloon\n    public static boolean isDoubloon(String word) {\n        word = word.toLowerCase();  // case insensitive\n        Map<Character, Integer> freq = new HashMap<>();\n\n        for (char c : word.toCharArray()) {\n            freq.put(c, freq.getOrDefault(c, 0) + 1);\n        }\n\n        for (int count : freq.values()) {\n            if (count != 2) return false;\n        }\n        return true;\n    }\n}\n"
    },
    "9": {
        "question": "Write a recursive function length to count the length of the string using the below function definition:\nint length(String s)",
        "answer": "public class StringLengthRecursive {\n\n    // Recursive function to find length of string\n    static int length(String s) {\n        // Base case: empty string\n        if (s.equals(\"\")) {\n            return 0;\n        }\n        // Recursive case: 1 + length of substring (excluding first char)\n        return 1 + length(s.substring(1));\n    }\n\n    public static void main(String[] args) {\n        String str = \"recursion\";\n        System.out.println(\"Length of \\\"\" + str + \"\\\" is: \" + length(str));\n    }\n}\n"
    },
    "10": {
        "question": "Write a  function findElement that searches for a given value in the given array and return the index position where it is found or -1 if not found.  Use the following function definition:\n  int findElement(int[] arr, int value);",
        "answer": "public class FindElement {\n\n    // Function to search for a value in the array\n    static int findElement(int[] arr, int value) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == value) {\n                return i; // return index if found\n            }\n        }\n        return -1; // return -1 if not found\n    }\n\n    public static void main(String[] args) {\n        int[] numbers = {10, 20, 30, 40, 50};\n\n        System.out.println(findElement(numbers, 30)); // Output: 2\n        System.out.println(findElement(numbers, 100)); // Output: -1\n    }\n}\n"
    },
    "11": {
        "question": "Write a program to input 2 integers and divide the first numer by the second one. If the second number is not zero then return the answer otherwise throw an error \"Divison by zero is not possible\"",
        "answer": "import java.util.Scanner;\n\npublic class SafeDivision {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        System.out.print(\"Enter first integer: \");\n        int a = sc.nextInt();\n\n        System.out.print(\"Enter second integer: \");\n        int b = sc.nextInt();\n\n        try {\n            int result = divide(a, b);\n            System.out.println(\"Result: \" + result);\n        } catch (ArithmeticException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    // Function to divide two integers\n    static int divide(int x, int y) {\n        if (y == 0) {\n            throw new ArithmeticException(\"Division by zero is not possible\");\n        }\n        return x / y;\n    }\n}\n"
    },
    "12": {
        "question": "Write a method range that accepts an ArrayList of integers as a parameter and that returns the range of values contained in the list, which is defined as 1 more than the difference between the largest and smallest elements.\nFor example if a variable called list stores the following values:\n[18, 14, 29, 12, 7, 25].   The call of range(list) should return 23, because this is one more than the largest difference between any pair of values (29 - 7 + 1 = 23). An empty list is defined to have a range of 0.",
        "answer": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class ListRange {\n    \n    // Method to calculate range\n    public static int range(ArrayList<Integer> list) {\n        if (list.isEmpty()) {\n            return 0; // empty list has range 0\n        }\n        int max = Collections.max(list);\n        int min = Collections.min(list);\n        return (max - min + 1);\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<>();\n        Collections.addAll(list, 18, 14, 29, 12, 7, 25);\n\n        System.out.println(\"Range: \" + range(list)); // Output: 23\n    }\n}\n"
    },
    "13": {
        "question": "Factorial of a number 'n' is the product of all numbers from 1 to 'n'.\nWrite a program to input a number and print its factorial. (Note: 0 factorial is 1)\nIf the input is negative, it should print \"Invalid Input\"\nSample Input: 4\nSample Output: 24\nExplanation: 1x2x3x4 = 24\nSample Input: -2\nSample Output: Invalid Input\nSample Input: 0\nSample Output: 1\nExplanation: 0 factorial is 1 as a rule.",
        "answer": "import java.util.Scanner;\n\npublic class FactorialCalculator {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        System.out.print(\"Enter a number: \");\n        int n = sc.nextInt();\n\n        if (n < 0) {\n            System.out.println(\"Invalid Input\");\n        } else {\n            long fact = 1;\n            for (int i = 1; i <= n; i++) {\n                fact *= i;\n            }\n            System.out.println(fact);\n        }\n    }\n}\n"
    },
    "14": {
        "question": "Write a program to input array size in 1st line and the elements in the , sort the Array(Without using any library functions) in Ascending and print the Elements in the Array\nSample input:\n5\n5 3 2 4 1\nSample output:\n1 2 3 4 5",
        "answer": "import java.util.Scanner;\n\npublic class ArraySort {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt(); // array size\n        int[] arr = new int[n];\n\n        // input array elements\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        // Bubble sort in ascending order\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    // swap arr[j] and arr[j+1]\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n\n        // print sorted array\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n"
    },
    "15": {
        "question": "Write a program to input an integer n and print the sum of all the positive numbers from 1 to n and print it.\nSample input: 5\nSample output: 15\nExplanation: 1+2+3+4+5 = 15",
        "answer": "import java.util.Scanner;\n\npublic class SumPositiveNumbers {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        System.out.print(\"Enter a number: \");\n        int n = sc.nextInt();\n\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n\n        System.out.println(sum);\n    }\n}\n"
    },
    "16": {
        "question": "Write a recursive function to to add all of the numbers up to given argument.\nExample 1:\nsum(5) will return 15\nReason 1+2+3+4+5=15",
        "answer": "import java.util.Scanner;\n\npublic class RecursiveSum {\n\n    // Recursive function to calculate sum from 1 to n\n    static int sum(int n) {\n        if (n <= 0) { // base case\n            return 0;\n        }\n        return n + sum(n - 1); // recursive call\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        System.out.print(\"Enter a number: \");\n        int n = sc.nextInt();\n\n        System.out.println(\"Sum: \" + sum(n));\n    }\n}\n"
    },
    "17": {
        "question": "A 3-digit number is said to be a Lucky number if the sum of the first digit and third digit in the number is equal to the second digit in the number.\nWrite a Java program to find whether a given number is a Lucky Number or not.\nInput specification:\nInput consists of a single integer.\nOutput specification:\nIf the input is not a 3-digit number, the output must be 'Invalid Input'. If the input is a Lucky number, the output must be 'Lucky Number'. If the input is not a Lucky number, the output must be 'Not A Lucky Number' followed by a newline.\nSample Input: 165\nSample Output: Lucky Number\nSample Input: 2345\nSample Output: Invalid Input\nSample Input: 232\nSample Output: Not A Lucky Number",
        "answer": "import java.util.Scanner;\n\npublic class LuckyNumberChecker {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        System.out.print(\"Enter a number: \");\n        int num = sc.nextInt();\n\n        // Check if it's a 3-digit number\n        if (num < 100 || num > 999) {\n            System.out.println(\"Invalid Input\");\n            return;\n        }\n\n        // Extract digits\n        int first = num / 100;        // hundreds place\n        int second = (num / 10) % 10; // tens place\n        int third = num % 10;         // units place\n\n        // Check lucky condition\n        if (first + third == second) {\n            System.out.println(\"Lucky Number\");\n        } else {\n            System.out.println(\"Not A Lucky Number\");\n        }\n    }\n}\n"
    },
    "18": {
        "question": "Given a string, write a program to get a substring that starts from the first occurrence of letter 'a' and ends with the last occurrence of letter 'a'. Remove all occurrences of letter 'a' from the substring and print.\nSample Input:\ni am a beautiful fairy\nSample Output: \nm beutiful f",
        "answer": "import java.util.Scanner;\n\npublic class SubstringRemoveA {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String str = sc.nextLine();\n\n        // Find first and last occurrence of 'a'\n        int first = str.indexOf('a');\n        int last = str.lastIndexOf('a');\n\n        if (first == -1 || last == -1 || first == last) {\n            System.out.println(\"\"); // no 'a' or only one 'a'\n            return;\n        }\n\n        // Extract substring from first 'a' to last 'a'\n        String sub = str.substring(first, last + 1);\n\n        // Remove all 'a' from substring\n        sub = sub.replace(\"a\", \"\");\n\n        System.out.println(sub);\n    }\n}\n"
    },
    "19": {
        "question": "Write a program to read n number of strings, Concatenate the last 2 characters in each string and print it.\nInput specification:\nThe first line of input will contain the number of strings. The string values, one per line will follow.\nSample Input : \n3\njava\ncoding\nbugs\nSample Output :\nvanggs",
        "answer": "import java.util.Scanner;\n\npublic class LastTwoConcat {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt(); // number of strings\n        sc.nextLine(); // consume newline\n\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < n; i++) {\n            String str = sc.nextLine();\n            if (str.length() >= 2) {\n                // take last 2 characters and append to result\n                result.append(str.substring(str.length() - 2));\n            } else {\n                // if string has less than 2 characters, append the whole string\n                result.append(str);\n            }\n        }\n\n        System.out.println(result.toString());\n    }\n}\n"
    },
    "20": {
        "question": "Write a java program to print a comma (,) separated series of prime numbers between M and N including. Check if the inputs are correct or not if not then print Invalid input?\n\n\n\n\nSample input:- 1 10\n\nSample output:- 2,3,5,7\n\n\n\n\nInput Explanation:- First number 1 is the starting point of the series and last number 10 is the tail of the series.\"",
        "answer": "import java.util.Scanner;\n\npublic class PrimeSeries {\n    // Function to check if a number is prime\n    static boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int M = sc.nextInt();\n        int N = sc.nextInt();\n\n        // Input validation\n        if (M > N || M < 0 || N < 0) {\n            System.out.println(\"Invalid input\");\n            return;\n        }\n\n        StringBuilder primes = new StringBuilder();\n\n        for (int i = M; i <= N; i++) {\n            if (isPrime(i)) {\n                if (primes.length() > 0) {\n                    primes.append(\",\");\n                }\n                primes.append(i);\n            }\n        }\n\n        System.out.println(primes);\n    }\n}\n"
    },
    "21": {
        "question": "Write a program that allows a user to enter number of coins/notes he has in each denomination. Output is the total amount of money he has in coins, notes and total. Order of the input is as follows: 1 Rupee coins, 2 Rupee coins, 5 Rupee coins, 10 Rupee notes, 20 Rupee notes, 50 Rupee notes, 100 Rupee notes, 1000 Rupee notes\n\n\n\n\nSample input: 5 10 6 0 3 4 0 0\n\nSample output: Rs. 55 in coins Rs. 260 in notes Rs. 315 in total.",
        "answer": "import java.util.Scanner;\n\npublic class TotalMoneyCalculator {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Read counts of coins and notes\n        int one = sc.nextInt();\n        int two = sc.nextInt();\n        int five = sc.nextInt();\n        int ten = sc.nextInt();\n        int twenty = sc.nextInt();\n        int fifty = sc.nextInt();\n        int hundred = sc.nextInt();\n        int thousand = sc.nextInt();\n\n        // Calculate coins total\n        int coinsTotal = one * 1 + two * 2 + five * 5;\n\n        // Calculate notes total\n        int notesTotal = ten * 10 + twenty * 20 + fifty * 50 + hundred * 100 + thousand * 1000;\n\n        // Total money\n        int total = coinsTotal + notesTotal;\n\n        // Print result\n        System.out.println(\"Rs. \" + coinsTotal + \" in coins\");\n        System.out.println(\"Rs. \" + notesTotal + \" in notes\");\n        System.out.println(\"Rs. \" + total + \" in total.\");\n    }\n}\n"
    },
    "22": {
        "question": "A number \"N\" is palindrome if the original number and its reverse are same. e.g 121, 14541, 1331\nWrite a class PalinCheck that will check if a given number is a palindrome or not. The details of the instance variables and methods are given below:\nclass:PalinCheck\ninstance variables:\nnum:integer to store the number\nnumReverse:integer to store the reverse of the number\nMethods/Member functions: PalinCheck():constructor to initialize data member with legal initial values\nvoid getNumber():to get the number from user\nint revNum (int y):reverses the parameterized argument \"y\" and stores it in\"revnum\" using recursive technique.\nvoid checkPalin():checks whether the number is a Palindrome by invoking the function revNum( ) and prints the result as \"num is a palindrome\" or \"num is not a palindrome\" e.g \"121 is a palindrome\"  \"123 is not a palindrome\"",
        "answer": "import java.util.Scanner;\n\nclass PalinCheck {\n    int num;        // number to check\n    int numReverse; // reversed number\n\n    // Constructor to initialize variables\n    PalinCheck() {\n        num = 0;\n        numReverse = 0;\n    }\n\n    // Method to get number from user\n    void getNumber() {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        num = sc.nextInt();\n    }\n\n    // Recursive function to reverse number\n    int revNum(int y) {\n        if (y == 0) {\n            return 0;\n        } else {\n            int digits = (int) Math.log10(y);\n            return (y % 10) * (int) Math.pow(10, digits) + revNum(y / 10);\n        }\n    }\n\n    // Method to check palindrome\n    void checkPalin() {\n        numReverse = revNum(num);\n        if (num == numReverse) {\n            System.out.println(num + \" is a palindrome\");\n        } else {\n            System.out.println(num + \" is not a palindrome\");\n        }\n    }\n\n    // Main method\n    public static void main(String[] args) {\n        PalinCheck pc = new PalinCheck();\n        pc.getNumber();\n        pc.checkPalin();\n    }\n}\n"
    },
    "23": {
        "question": "Get Array size and elements, store the elements in array and print the elements in reverse order.\nSample input:\n5\n1 3 2 4 5\nSample output:\n5 4 2 3 1",
        "answer": "import java.util.Scanner;\n\npublic class ReverseArray {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt(); // array size\n        int[] arr = new int[n];\n\n        // Read array elements\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        // Print array in reverse order\n        for (int i = n - 1; i >= 0; i--) {\n            System.out.print(arr[i] + \" \");\n        }\n    }\n}\n"
    },
    "24": {
        "question": "Write a program that takes n numbers as input.\nFind the average of the array and the number of elements that are above the average.\nInput: \n1st line will contain value for n\nNext n lines will contain values for the array\nOutput:\nFirst print the average and then print the number of elements greater than the average.\nFor Example\nInput:\n4\n74 21 55 96\nOutput:\n61 74 96\nHere 61 is the average of the elements present in the array and next line shows the elements greater than the average.\nNote: Consider the integer part after taking the average i.e. if average is 56.33 then consider it as 56",
        "answer": "import java.util.Scanner;\n\npublic class AboveAverage {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        int sum = 0;\n\n        // Read array elements and calculate sum\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n            sum += arr[i];\n        }\n\n        // Calculate integer part of average\n        int avg = sum / n;\n        System.out.println(avg);\n\n        // Print elements greater than average\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > avg) {\n                System.out.print(arr[i] + \" \");\n            }\n        }\n    }\n}\n"
    },
    "25": {
        "question": "Write a recursive function to search for a particular element in an array. The function will take 3 arguments :- An Array, the start index and a search value. If the value is present, return its index otherwise return -1.\nExample 1:\nfindElement([1, 2, 3, 4, 5], 0, 3) will return 2\nReason: 3 is present in the array at index 2\nExample 2:\nfindElement([10, 15, 20, 25, 30, 35, 40], 0, 15) will return 1\nReason: 10 is present at index 1\nExample 3:\nfindElement([1, 2, 3, 4, 5], 0, 7) will return -1\nReason: 7 is not present in the array hence return -1",
        "answer": "public class RecursiveSearch {\n\n    // Recursive function to find element\n    static int findElement(int[] arr, int start, int value) {\n        if (start >= arr.length) { // base case: reached end\n            return -1;\n        }\n        if (arr[start] == value) { // found the value\n            return start;\n        }\n        return findElement(arr, start + 1, value); // recursive call\n    }\n\n    public static void main(String[] args) {\n        int[] arr1 = {1, 2, 3, 4, 5};\n        int[] arr2 = {10, 15, 20, 25, 30, 35, 40};\n\n        System.out.println(findElement(arr1, 0, 3)); // Output: 2\n        System.out.println(findElement(arr2, 0, 15)); // Output: 1\n        System.out.println(findElement(arr1, 0, 7)); // Output: -1\n    }\n}\n"
    },
    "26": {
        "question": "It\"s election day. Write a program that counts votes cast and prints the person who won. Input: 1st line will contain the number of candidates. The next lines will contain 1 vote per line. The vote will be the serial number of the candidate. So for ten candidates, possible inputs are 1-10. Keep taking input till you get 0. Inputs are such that the highest vote-getter has unique number of votes. Output: 1st line will contain the serial number of the candidate who won. 2nd line will contain the number of votes that he/she got.\nSample input: \n3\n1\n1\n1\n2\n2\n3\n0\nSample output: \n1\n3",
        "answer": "import java.util.Scanner;\n\npublic class Election {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Number of candidates\n        int n = sc.nextInt();\n\n        // Array to store votes for each candidate (index 0 unused)\n        int[] votes = new int[n + 1];\n\n        while (true) {\n            int vote = sc.nextInt();\n            if (vote == 0) break; // stop input\n            if (vote >= 1 && vote <= n) {\n                votes[vote]++;\n            }\n        }\n\n        // Find candidate with highest votes\n        int maxVotes = 0;\n        int winner = 0;\n        for (int i = 1; i <= n; i++) {\n            if (votes[i] > maxVotes) {\n                maxVotes = votes[i];\n                winner = i;\n            }\n        }\n\n        // Print winner and vote count\n        System.out.println(winner);\n        System.out.println(maxVotes);\n    }\n}\n\n"
    },
    "27": {
        "question": "Write a Java program to print the nth term of an arithmetic progression (AP). Your program should take three integers corresponding to the first term, common difference and n as input and print the nth term in a line by itself. In AP series, nth term=first term+(n-1)* common difference.\n\n\n\n\nSample input: 1 5 10\n\nExpected output: 46",
        "answer": "import java.util.Scanner;\n\npublic class ArithmeticProgression {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Read first term, common difference, and n\n        int firstTerm = sc.nextInt();\n        int commonDiff = sc.nextInt();\n        int n = sc.nextInt();\n\n        // Calculate nth term\n        int nthTerm = firstTerm + (n - 1) * commonDiff;\n\n        // Print nth term\n        System.out.println(nthTerm);\n    }\n}\n"
    },
    "28": {
        "question": "Take an integer array as input and classify it as any one of the following types: (1) Increasing (2) Decreasing (3) Increasing then Decreasing and (4) Decreasing then Increasing. You can assume that every array will fall into one of these categories. The first line will contain \"n\" the size of the array followed by \"n\" elements. You need to print the size of the array along with the type of the array.\n\n\n\n\nSample Input:\n\n5\n\n1\n\n2\n\n3\n\n4\n\n5\n\nSample Output:\n\n5 Increasing\n\n\n\n\nSample Input:\n\n6\n\n1\n\n2\n\n3\n\n4\n\n-1\n\n-2\n\n\n\n\nSample Output:\n\n6 Increasing then Decreasing",
        "answer": "import java.util.Scanner;\n\npublic class ArrayClassifier {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt(); // size of array\n        int[] arr = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        String type = classifyArray(arr);\n        System.out.println(n + \" \" + type);\n    }\n\n    // Method to classify the array\n    public static String classifyArray(int[] arr) {\n        boolean increasing = true, decreasing = true;\n\n        // Check if purely increasing\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] < arr[i - 1]) {\n                increasing = false;\n                break;\n            }\n        }\n        if (increasing) return \"Increasing\";\n\n        // Check if purely decreasing\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > arr[i - 1]) {\n                decreasing = false;\n                break;\n            }\n        }\n        if (decreasing) return \"Decreasing\";\n\n        // Check for Increasing then Decreasing\n        int i = 1;\n        while (i < arr.length && arr[i] > arr[i - 1]) i++;\n        if (i > 1) {\n            boolean dec = true;\n            for (int j = i; j < arr.length; j++) {\n                if (arr[j] > arr[j - 1]) {\n                    dec = false;\n                    break;\n                }\n            }\n            if (dec) return \"Increasing then Decreasing\";\n        }\n\n        // If not above, it must be Decreasing then Increasing\n        return \"Decreasing then Increasing\";\n    }\n}\n"
    },
    "29": {
        "question": "Write a program that reads a String. If a word in the String contains consecutive repeated character, then replace all consecutive repeated character by a numeral n followed by that repeating character, where n is number of times that character repeated.\nNOTE: Bootstrap classes will not work in java\n \nSample Input :\nI worrrk att Ignnnnnitttttte.\nSample Output :\nI wo3rk a2t Ig5ni6te.",
        "answer": "import java.util.Scanner;\n\npublic class ConsecutiveCharCompressor {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n\n        StringBuilder result = new StringBuilder();\n\n        int i = 0;\n        while (i < input.length()) {\n            char current = input.charAt(i);\n            int count = 1;\n\n            // Count consecutive occurrences\n            while (i + 1 < input.length() && input.charAt(i + 1) == current) {\n                count++;\n                i++;\n            }\n\n            // Append compressed format if count > 1, else just the character\n            if (count > 1) {\n                result.append(count).append(current);\n            } else {\n                result.append(current);\n            }\n            i++;\n        }\n\n        System.out.println(result.toString());\n    }\n}\n"
    },
    "30": {
        "question": "Write a java program to shift the array elements to the right side by k terms Sample:\n\nInput:\n\n5\n\n1 2 3 4 5\n\n3\n\nOutput:\n\n3 4 5 1 2\n\nExplanation: Array of size 5 i.e, {1, 2, 3, 4, 5} is\n\nshifted to k places, which is 3. So the values in the each index position\"s are shifted by 3 places, producing the output as {3, 4, 5, 1, 2}",
        "answer": "import java.util.Scanner;\n\npublic class ArrayShift {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt(); // size of array\n        int[] arr = new int[n];\n\n        // Read array elements\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        int k = sc.nextInt(); // positions to shift\n        k = k % n; // handle k > n\n\n        // Create a new array for result\n        int[] result = new int[n];\n\n        // Shift elements\n        for (int i = 0; i < n; i++) {\n            result[i] = arr[(i + k) % n];\n        }\n\n        // Print shifted array\n        for (int i = 0; i < n; i++) {\n            System.out.print(result[i] + \" \");\n        }\n    }\n}\nimport java.util.Scanner;\n\npublic class PrimeIndexSwitch {\n    // Function to check if a number is prime\n    static boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt(); // size of array\n        int[] arr = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        int count = 0;\n\n        for (int i = 0; i < n; i++) {\n            int index = i;\n            int elem = arr[i];\n\n            // Only consider prime factors\n            if (index > 0 && elem % index == 0 && isPrime(index)) {\n                arr[i] = index;\n                count++;\n            }\n        }\n\n        // Print number of elements switched\n        System.out.println(count);\n\n        // Print switched array\n        for (int i = 0; i < n; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n    }\n}\n"
    },
    "31": {
        "question": "Arjit likes to play with numbers. Once he decided to play a switching game. He had an array of numbers. In that array, if the index of the element is one of the prime factors of that element than he wants to replace that element with the index it self. As Arjit is not that well versed in programming so he needs your help in doing the same. Write a java program to achieve the following.\nInput Specification:\nFirst line will contain the size of array (2<=size<=100)\nOutput Specification:\nFirst line will be the number of elements switched in that array\nNext line will show the switched array.\nNOTE: Assume that there will be at least one such case where the index of array will be the prime factor of the element that is stores. (Array index starts from zero)\nSample Input: \n6\n12 11 4 8 4 10\n Sample Output: \n2\n12 11 2 8 4 5\nExplanation: As we can see that the element 4 is stored in index 2 and 2 is also one of the prime factors of 4 hence 4 will be replaced by the index which is 2. In the same way the element 10 in the array is stored in index 5 and 5 is one of the prime factors of 10 hence 10 will be replaced by 5. Also element 4 and 10 are two such instances in above array hence first line of output will be 2.",
        "answer": "import java.util.Scanner;\n\npublic class PrimeIndexSwitch {\n    \n    // Method to check if a number is prime\n    static boolean isPrime(int n) {\n        if (n < 2) return false;\n        for (int i = 2; i*i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i != 0 && arr[i] % i == 0 && isPrime(i)) {\n                arr[i] = i;\n                count++;\n            }\n        }\n\n        System.out.println(count);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n"
    },
    "32": {
        "question": "Write a Java Program that will switch the case of character to Upper if it is lower and to lower if it is upper. Print the output as invalid if your input contains digit or special characters except space.\n\n\n\n\nSample Input: i loVE JAVA\n\nSample Output: I LOve java\n\n\n\n\nSample Input: 123!@#\n\nSample Output: Invalid Input",
        "answer": "import java.util.Scanner;\n\npublic class SwitchCaseChar {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n\n        StringBuilder output = new StringBuilder();\n        boolean valid = true;\n\n        for (char ch : input.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                if (Character.isUpperCase(ch)) {\n                    output.append(Character.toLowerCase(ch));\n                } else {\n                    output.append(Character.toUpperCase(ch));\n                }\n            } else if (ch == ' ') {\n                output.append(ch);  // keep space as it is\n            } else {\n                valid = false;  // invalid if digit or special character\n                break;\n            }\n        }\n\n        if (valid) {\n            System.out.println(output);\n        } else {\n            System.out.println(\"Invalid Input\");\n        }\n    }\n}\npublic class Rectangle {\n    // Private instance variables\n    private double width;\n    private double height;\n\n    // Constructor to initialize width and height\n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    // Getter for width\n    public double getWidth() {\n        return width;\n    }\n\n    // Getter for height\n    public double getHeight() {\n        return height;\n    }\n\n    // Setter for width\n    public void setWidth(double width) {\n        this.width = width;\n    }\n\n    // Setter for height\n    public void setHeight(double height) {\n        this.height = height;\n    }\n\n    // Method to calculate area\n    public double calculateArea() {\n        return width * height;\n    }\n\n    // Method to calculate perimeter\n    public double calculatePerimeter() {\n        return 2 * (width + height);\n    }\n\n    // Main method to test the class\n    public static void main(String[] args) {\n        Rectangle rect = new Rectangle(5.0, 3.0);\n        System.out.println(\"Width: \" + rect.getWidth());\n        System.out.println(\"Height: \" + rect.getHeight());\n        System.out.println(\"Area: \" + rect.calculateArea());\n        System.out.println(\"Perimeter: \" + rect.calculatePerimeter());\n\n        // Changing dimensions\n        rect.setWidth(7.0);\n        rect.setHeight(4.0);\n        System.out.println(\"Updated Area: \" + rect.calculateArea());\n        System.out.println(\"Updated Perimeter: \" + rect.calculatePerimeter());\n    }\n}\n"
    },
    "33": {
        "question": "In this exercise, you are tasked with completing the implementation of a Rectangle class in Java, which is designed to represent a rectangle's properties and behaviors. The Rectangle class contains two private instance variables: width and height, which are essential for defining the dimensions of the rectangle. Your job is to implement the constructor that initializes these instance variables with the values provided as parameters when a new Rectangle object is created.\nAdditionally, you need to complete the getter methods getWidth() and getHeight(), which should return the current values of the width and height attributes, respectively. Furthermore, you will implement the setter methods setWidth(double width) and setHeight(double height), allowing users to modify the dimensions of the rectangle after it has been instantiated.\nMoreover, the class should include two methods: calculateArea() and calculatePerimeter(). The calculateArea() method must compute and return the area of the rectangle using the formula width * height, while the calculatePerimeter() method should calculate and return the perimeter using the formula 2 * (width + height).\nYour task is to fill in the missing code in the provided Rectangle class template, ensuring that all methods function correctly to encapsulate the properties and behaviors of a rectangle. This exercise will help you understand the principles of object-oriented programming, including encapsulation, constructors, and method implementation in Java.",
        "answer": "public class Rectangle {\n    // Private instance variables\n    private double width;\n    private double height;\n\n    // Constructor to initialize width and height\n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    // Getter for width\n    public double getWidth() {\n        return width;\n    }\n\n    // Getter for height\n    public double getHeight() {\n        return height;\n    }\n\n    // Setter for width\n    public void setWidth(double width) {\n        this.width = width;\n    }\n\n    // Setter for height\n    public void setHeight(double height) {\n        this.height = height;\n    }\n\n    // Method to calculate area\n    public double calculateArea() {\n        return width * height;\n    }\n\n    // Method to calculate perimeter\n    public double calculatePerimeter() {\n        return 2 * (width + height);\n    }\n}\npublic class Person {\n    // Private instance variables\n    private String name;\n    private int age;\n    private String address;\n\n    // Constructor to initialize the person\n    public Person(String name, int age, String address) {\n        this.name = name;\n        this.age = age;\n        this.address = address;\n    }\n\n    // Getter for name\n    public String getName() {\n        return name;\n    }\n\n    // Setter for name\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    // Getter for age\n    public int getAge() {\n        return age;\n    }\n\n    // Setter for age\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    // Getter for address\n    public String getAddress() {\n        return address;\n    }\n\n    // Setter for address\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    // Method to display person information\n    public String displayInfo() {\n        return \"Name: \" + name + \"\\nAge: \" + age + \"\\nAddress: \" + address;\n    }\n\n    // Main method to test the class\n    public static void main(String[] args) {\n        Person person = new Person(\"Alice\", 25, \"123 Main St\");\n        System.out.println(person.displayInfo());\n\n        // Updating attributes\n        person.setName(\"Bob\");\n        person.setAge(30);\n        person.setAddress(\"456 Park Ave\");\n        System.out.println(\"\\nUpdated Info:\");\n        System.out.println(person.displayInfo());\n    }\n}\n"
    },
    "34": {
        "question": "In this exercise, you are required to complete the implementation of a Person class in Java, which is designed to encapsulate the attributes and behaviors of a person. The Person class contains three private instance variables: name, age, and address, which represent the essential characteristics of a person. Your task is to implement the constructor that initializes these instance variables with the values provided as parameters when a new Person object is created.\nAdditionally, you need to complete the getter methods getName(), getAge(), and getAddress(), which should return the current values of the name, age, and address attributes, respectively. Furthermore, you will implement the setter methods setName(String name), setAge(int age), and setAddress(String address), allowing users to modify these attributes after the object has been instantiated.\nMoreover, the class should include a method named displayInfo(), which constructs and returns a formatted string containing the person's information, including their name, age, and address. This method should provide a clear and readable representation of the person's details.\nYour task is to fill in the missing code in the provided Person class template, ensuring that all methods function correctly to encapsulate the properties and behaviors of a person. This exercise will help you understand the principles of object-oriented programming, including encapsulation, constructors, and method implementation in Java.",
        "answer": "public class Person {\n    // Private instance variables\n    private String name;\n    private int age;\n    private String address;\n\n    // Constructor to initialize the Person object\n    public Person(String name, int age, String address) {\n        this.name = name;\n        this.age = age;\n        this.address = address;\n    }\n\n    // Getter for name\n    public String getName() {\n        return name;\n    }\n\n    // Setter for name\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    // Getter for age\n    public int getAge() {\n        return age;\n    }\n\n    // Setter for age\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    // Getter for address\n    public String getAddress() {\n        return address;\n    }\n\n    // Setter for address\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    // Method to display person information\n    public String displayInfo() {\n        return \"Name: \" + name + \"\\nAge: \" + age + \"\\nAddress: \" + address;\n    }\n\n    // Optional main method to test the class\n    public static void main(String[] args) {\n        Person p = new Person(\"Alice\", 25, \"123 Main Street\");\n        System.out.println(p.displayInfo());\n\n        // Update attributes\n        p.setName(\"Bob\");\n        p.setAge(30);\n        p.setAddress(\"456 Park Avenue\");\n        System.out.println(\"\\nUpdated Info:\");\n        System.out.println(p.displayInfo());\n    }\n}\n"
    },
    "35": {
        "question": "Given a class janDhanAccount with fields accountNumber and balance and a method deposit() that adds an amount to the balance. This account is allowed to have zero balance.\n\nThere is a function toString() which will print the account details in this format Account no:1000 has a balance of:12000.0\n\nCreate a subclass SavingsAccount that extends janDhanAccount and adds a field minimumBalance and a method withdraw(amount) that subtracts an amount from the balance.\n\nminimumBalance is the minimum amount to be maintained in the account. Therefore, do not allow withdrawal if the balance will fall below the minimum balance.\n\nwithdraw() should return balance after successful withdrawal or -1 if withdrawal is not possible due to low balance.\n\ntoString() method to return maximum amount that can be withdrawn in addition to account details in the following fromat:\n\nAccount no:1000 has a balance of:12000.0 maximum that can be withdrawn:7000.0",
        "answer": "// Base class\nclass janDhanAccount {\n    protected int accountNumber;\n    protected double balance;\n\n    // Constructor\n    public janDhanAccount(int accountNumber, double balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    // Deposit method\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    // toString method\n    @Override\n    public String toString() {\n        return \"Account no:\" + accountNumber + \" has a balance of:\" + balance;\n    }\n}\n\n// Subclass\nclass SavingsAccount extends janDhanAccount {\n    private double minimumBalance;\n\n    // Constructor\n    public SavingsAccount(int accountNumber, double balance, double minimumBalance) {\n        super(accountNumber, balance);\n        this.minimumBalance = minimumBalance;\n    }\n\n    // Withdraw method\n    public double withdraw(double amount) {\n        if (balance - amount >= minimumBalance) {\n            balance -= amount;\n            return balance;\n        } else {\n            return -1; // Withdrawal not allowed\n        }\n    }\n\n    // toString method\n    @Override\n    public String toString() {\n        double maxWithdrawable = balance - minimumBalance;\n        return super.toString() + \" maximum that can be withdrawn:\" + maxWithdrawable;\n    }\n}\n\n// Main class to test\npublic class Main {\n    public static void main(String[] args) {\n        SavingsAccount sa = new SavingsAccount(1000, 12000, 5000);\n\n        System.out.println(sa); // Print account details\n\n        // Test withdrawal\n        double result = sa.withdraw(4000);\n        if (result != -1) {\n            System.out.println(\"Withdrawal successful. New balance: \" + result);\n        } else {\n            System.out.println(\"Withdrawal failed. Balance too low.\");\n        }\n\n        System.out.println(sa); // Print updated account details\n    }\n}\n"
    },
    "36": {
        "question": "Function F is defined thus: For any positive integer X, F(X) is the number of zeros at the end of the decimal form of number X!. This function never decreases. If we have two numbers X1<X2, then F(X1) <= F(X2). It is because we can never \"\"lose\"\" any trailing zero by multiplying by any positive number. We can only get new and new zeros. The function F is very interesting, so we need a computer program that can determine its value efficiently.\nInput\nThere is a single positive integer X, 1 <= X <= 1000.\nOutput\nA single line containing the single non-negative integer F(X).\nExample:\nInput\n5\nOutput:\n1\nExplanation:\nx=5.   5! = 120 and  F(5) = 1  as there is only one trailing zeros in the end.",
        "answer": "import java.util.Scanner;\n\npublic class TrailingZeros {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int X = sc.nextInt();\n        int count = 0;\n        int temp = X;\n\n        // Count multiples of 5, 25, 125, etc.\n        while (temp >= 5) {\n            count += temp / 5;\n            temp /= 5;\n        }\n\n        System.out.println(count);\n    }\n}\n"
    },
    "37": {
        "question": "Question :  \nA positive integer is called a palindrome if its representation in the decimal system is the same when read from left to right and from right to left. For a given positive integer K of not more than 20 digits, write the value of the smallest palindrome larger than K to output. Numbers are always displayed without leading zeros.\nInput\nInteger K of not more than 20 digits\nOutput\noutput the smallest palindrome larger than K.\nExample:\nInput\n12\nOutput:\n22\nExplanation:   The next available palindrome after 12 is only 22.",
        "answer": "import java.util.Scanner;\n\npublic class NextPalindrome {\n    \n    // Method to check if a string is a palindrome\n    static boolean isPalindrome(String s) {\n        int n = s.length();\n        for (int i = 0; i < n / 2; i++) {\n            if (s.charAt(i) != s.charAt(n - i - 1))\n                return false;\n        }\n        return true;\n    }\n\n    // Method to get the next palindrome larger than the input\n    static String nextPalindrome(String num) {\n        int length = num.length();\n        String next = num;\n\n        while (true) {\n            // Increment the number by 1\n            next = addOne(next);\n            // Check if it's palindrome\n            if (isPalindrome(next)) {\n                return next;\n            }\n        }\n    }\n\n    // Helper method to add 1 to a big number represented as string\n    static String addOne(String num) {\n        StringBuilder sb = new StringBuilder(num);\n        int carry = 1;\n        for (int i = sb.length() - 1; i >= 0; i--) {\n            int digit = sb.charAt(i) - '0' + carry;\n            sb.setCharAt(i, (char)((digit % 10) + '0'));\n            carry = digit / 10;\n        }\n        if (carry > 0) {\n            sb.insert(0, '1');\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String K = sc.next();\n        System.out.println(nextPalindrome(K));\n    }\n}\n"
    },
    "38": {
        "question": "A Sumo number is a number for which the sum of its proper divisors is greater than that number. The sum of the proper divisors of 12 would be 1 + 2 + 3 + 4 + 6 = 16, which means that 12 is a Sumo number. Write a program which accepts input integer as limit upto which it will print Sumo numbers.\n\nFor Ex: 1) If user inputs 20 then it should print all sumo numbers upto 20: 12 18 20\n\n2) If user inputs 40 then it should print 12 18 20 24 30 36 40\n\nSample Input: 20\n\nSample Output: 12 18 20",
        "answer": "import java.util.Scanner;\n\npublic class SumoNumbers {\n\n    // Method to calculate sum of proper divisors\n    static int sumOfDivisors(int n) {\n        int sum = 1; // 1 is always a proper divisor\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter limit: \");\n        int limit = sc.nextInt();\n\n        for (int i = 2; i <= limit; i++) { // start from 2, 1 cannot be Sumo number\n            if (sumOfDivisors(i) > i) {\n                System.out.print(i + \" \");\n            }\n        }\n    }\n}\n\n"
    },
    "39": {
        "question": "Write a code to display the following pattern.\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15",
        "answer": "public class NumberTriangle {\n    public static void main(String[] args) {\n        int n = 5; // Number of rows\n        int num = 1; // Starting number\n\n        for (int i = 1; i <= n; i++) { // Rows\n            for (int j = 1; j <= i; j++) { // Columns in each row\n                System.out.print(num + \" \");\n                num++;\n            }\n            System.out.println(); // Move to next row\n        }\n    }\n}\n"
    },
    "40": {
        "question": "Write a Java program that will take a string as input and print the longest voweless substring as output.\nSample Input:\nabcdefgykkddfghie\nSample OUtput:\nfgykkddfgh\nExplanation:\nAs we can clearly see the string starts with a vowel \"a\" then there is a substring \"bcd\" which is voweless after which again there is a vowel \"e\" followed by voweless substring \"fgykkddfgh\" again followed by vowels. So we have two voweless substring \"bcd\" and \"fgykkddfgh\" and the longest of them is \"fgykkddfgh\". Hence that is the output.\nHint: Assume that in the testcases there will be no two substrings with same length",
        "answer": "import java.util.Scanner;\n\npublic class LongestVowelessSubstring {\n    \n    // Method to check if a character is a vowel\n    static boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String str = sc.nextLine();\n\n        int maxLen = 0;\n        int startIndex = 0;\n        int currentStart = 0;\n        int currentLen = 0;\n\n        for (int i = 0; i < str.length(); i++) {\n            if (!isVowel(str.charAt(i))) {\n                if (currentLen == 0) {\n                    currentStart = i; // Start of new voweless substring\n                }\n                currentLen++;\n            } else {\n                // Check if current voweless substring is the longest\n                if (currentLen > maxLen) {\n                    maxLen = currentLen;\n                    startIndex = currentStart;\n                }\n                currentLen = 0; // Reset length for next substring\n            }\n        }\n\n        // Final check in case the string ends with a voweless substring\n        if (currentLen > maxLen) {\n            maxLen = currentLen;\n            startIndex = currentStart;\n        }\n\n        String longestVoweless = str.substring(startIndex, startIndex + maxLen);\n        System.out.println(longestVoweless);\n    }\n}\n"
    },
    "41": {
        "question": "A pair of 2-digit numbers are said to be Ignite Friends, if the same digits appear in the product of the two numbers. The digits can appear in any order in the product. All the digits in the two numbers should appear in the product.\nFor example, consider the 2 numbers 15 and 93. The digits in these 2 numbers are 1, 5, 9 and 3. The product of 15 and 93 is 1395. The digits in the product are 1, 3, 9 and 5. The digits that appear in the product are the same as the digits in the multiplier and multiplicand. So the pair 15 and 93 are Ignite Friends.\nAnother example, consider the 2 numbers 15 and 87. The digits in these 2 numbers are 1, 5, 8 and 7. The product of 15 and 87 is 1305. The digits in the product are 1, 3, 0 and 5. The digits that appear in the product are not the same as the digits in the multiplier and multiplicand. So the pair 15 and 93 are not Ignite Friends.\nWrite a program to determine if the given pair of numbers (m,n) are Ignite Friends or not.\nOutput specification:\nIf any of the 2 input numbers(n1 & n2) is not a 2-digit number, then the output should be 'Invalid Input'. If the pair satisfies the condition for Ignite Friends, then the output should be 'n1 and n2 are Ignite Friends'. If the pair does not satisfy the condition for Ignite Friends, then the output should be 'n1 and n2 are not Ignite Friends'.\nSample Input 1:\n15\n93\nSample Output 1:\n15 and 93 are Ignite Friends\nSample Input 2:\n13\n12\nSample Output 2:\n13 and 12 are not Ignite Friends",
        "answer": "import java.util.Scanner;\nimport java.util.HashSet;\n\npublic class IgniteFriends {\n    \n    // Method to get digits of a number as a set\n    static HashSet<Character> getDigits(int num) {\n        HashSet<Character> set = new HashSet<>();\n        for (char c : String.valueOf(num).toCharArray()) {\n            set.add(c);\n        }\n        return set;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n1 = sc.nextInt();\n        int n2 = sc.nextInt();\n\n        // Check if both numbers are 2-digit numbers\n        if (n1 < 10 || n1 > 99 || n2 < 10 || n2 > 99) {\n            System.out.println(\"Invalid Input\");\n            return;\n        }\n\n        // Get digits of both numbers\n        HashSet<Character> digits = getDigits(n1);\n        digits.addAll(getDigits(n2));\n\n        // Get digits of product\n        int product = n1 * n2;\n        HashSet<Character> productDigits = getDigits(product);\n\n        // Check if digits match\n        if (digits.equals(productDigits)) {\n            System.out.println(n1 + \" and \" + n2 + \" are Ignite Friends\");\n        } else {\n            System.out.println(n1 + \" and \" + n2 + \" are not Ignite Friends\");\n        }\n    }\n}\n"
    },
    "42": {
        "question": "Write a Java Program that accepts an List of integers and prints True if the list contains a sequence of consecutive integers and False otherwise. Consecutive integers are integers that come one after the other either in ascending order or in descending order.\nInput Specification:\nFirst line of input is an integer t denotes number of test cases. For each test case, first input is an integer n denotes number of elements in the list followed by n integers.\nOutput Specification :\nOutput contains t lines where each line contains either True or False depending on respective list.\nSample Input :\n3\n5\n10 11 12 13 14\n7\n3 4 5 6 7 12 13\n10\n10 9 8 7 6 5 4 3 2 1\nExpected Output :\nTrue\nFalse\nTrue",
        "answer": "import java.util.*;\n\npublic class ConsecutiveSequence {\n\n    // Method to check if array contains consecutive integers\n    static boolean isConsecutive(int[] arr) {\n        if (arr.length <= 1) return true;\n\n        boolean ascending = arr[1] - arr[0] == 1;\n        boolean descending = arr[1] - arr[0] == -1;\n\n        for (int i = 1; i < arr.length; i++) {\n            if (ascending && arr[i] - arr[i - 1] != 1) return false;\n            if (descending && arr[i] - arr[i - 1] != -1) return false;\n            if (!ascending && !descending) return false;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int t = sc.nextInt(); // Number of test cases\n        while (t-- > 0) {\n            int n = sc.nextInt(); // Number of elements\n            int[] arr = new int[n];\n            for (int i = 0; i < n; i++) {\n                arr[i] = sc.nextInt();\n            }\n\n            System.out.println(isConsecutive(arr));\n        }\n    }\n}\n"
    },
    "43": {
        "question": "A sandwich is two pieces of 'bread' with something in between.\nSecret Sandwich String is a string having same N characters (Wrapper text) at the beginning of string and end of the string. But they are in the reverse order at the end. This string contains some text which is in between this wrapper. Now your task is to write a program to find out this text.\nSample Input 1 :\nbreadJamdaerb\nSample Output 1 :\nJam\n \n \nExplanation : \nString breadJamdaerb contains \"bread\" at the beginning and at the end in reverse order (daerb). that means Wrapper text is \"bread\". Now the remaining text is \"Jam\". So the output will be Jam\n \nNote : \nIf no wrapper text is found then print \"Invalid String\"",
        "answer": "import java.util.Scanner;\n\npublic class SecretSandwich {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String str = sc.nextLine();\n        boolean found = false;\n\n        // Try all possible wrapper lengths from 1 to half of string length\n        for (int len = 1; len <= str.length() / 2; len++) {\n            String start = str.substring(0, len);\n            String end = str.substring(str.length() - len);\n            StringBuilder sb = new StringBuilder(end);\n\n            if (start.equals(sb.reverse().toString())) {\n                // Found wrapper, extract text in between\n                String middle = str.substring(len, str.length() - len);\n                System.out.println(middle);\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            System.out.println(\"Invalid String\");\n        }\n    }\n}\nimport java.util.*;\n\npublic class MakeAnagrams {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String a = sc.nextLine();\n        String b = sc.nextLine();\n\n        // Count frequency of each character in both strings\n        int[] countA = new int[26];\n        int[] countB = new int[26];\n\n        for (char c : a.toCharArray()) countA[c - 'a']++;\n        for (char c : b.toCharArray()) countB[c - 'a']++;\n\n        // Build deleted characters\n        StringBuilder delA = new StringBuilder();\n        StringBuilder delB = new StringBuilder();\n        int totalDeletions = 0;\n\n        // Check deletions in string a\n        for (char c : a.toCharArray()) {\n            if (countB[c - 'a'] > 0) {\n                countB[c - 'a']--; // Match with b\n            } else {\n                delA.append(c); // Needs deletion\n                totalDeletions++;\n            }\n        }\n\n        // Check deletions in string b\n        for (char c : b.toCharArray()) {\n            if (countA[c - 'a'] > 0) {\n                countA[c - 'a']--; // Match with a\n            } else {\n                delB.append(c); // Needs deletion\n                totalDeletions++;\n            }\n        }\n\n        // Print output\n        System.out.println(delA.toString());\n        System.out.println(delB.toString());\n        System.out.println(totalDeletions);\n    }\n}\n"
    },
    "44": {
        "question": "Question :  \nAlice recently started learning about cryptography and found that anagrams are very useful. Two strings are anagrams of each other if they have same character set. For example strings \"bacdc\" and \"dcbac\" are anagrams, while strings \"bacdc\" and \"dcbad\" are not. Alice decides on an encryption scheme involving 2 large strings where encryption is dependent on the minimum number of character deletions required to make the two strings anagrams. She need your help in finding out this number. Given two strings (they can be of same or different length) help her in finding out the minimum number of character deletions required to make two strings anagrams. Any characters can be deleted from any of the strings.\nInput Format Two lines each containing a string. Constraints 1 <= Length of A,B <= 10000 A and B will only consist of lowercase latin letter.\nOutput Format Line one: Letters to be removed from first string in the order in which they appear in the string Line two: Letters to be removed from second string in the order in which they appear in the string Line Three: Count of letters\nInput: cde abc\nOutput:\nde\nab\n4\nExplanation We need to delete 4 characters to make both strings anagram i.e. 'd' and 'e' from first string and 'b' and 'a' from second string.",
        "answer": "import java.util.*;\n\npublic class AnagramDeletions {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String a = sc.nextLine();\n        String b = sc.nextLine();\n\n        // Count frequency of characters in both strings\n        int[] countA = new int[26];\n        int[] countB = new int[26];\n\n        for (char c : a.toCharArray()) countA[c - 'a']++;\n        for (char c : b.toCharArray()) countB[c - 'a']++;\n\n        StringBuilder delA = new StringBuilder();\n        StringBuilder delB = new StringBuilder();\n        int totalDeletions = 0;\n\n        // Check which characters in 'a' need to be deleted\n        for (char c : a.toCharArray()) {\n            if (countB[c - 'a'] > 0) {\n                countB[c - 'a']--; // Match found in b\n            } else {\n                delA.append(c);   // Needs deletion\n                totalDeletions++;\n            }\n        }\n\n        // Check which characters in 'b' need to be deleted\n        for (char c : b.toCharArray()) {\n            if (countA[c - 'a'] > 0) {\n                countA[c - 'a']--; // Match found in a\n            } else {\n                delB.append(c);   // Needs deletion\n                totalDeletions++;\n            }\n        }\n\n        // Output\n        System.out.println(delA.toString());\n        System.out.println(delB.toString());\n        System.out.println(totalDeletions);\n    }\n}\n"
    },
    "45": {
        "question": "Cinderella is a fan of pairs, especially when it comes to her shoe collection. One day, while inspecting her collection, she discovered that there was an odd number of shoes. Someone had stolen a shoe!\nCan you help Cinderella find out which type of shoe is missing?\nIf there is no missing shoes, print \"None\".\nInput:\n- The first line contains an integer, N, denoting the number of shoes.\n- The next N lines represent the types of shoes that remain in the collection.\nOutput:\n- Display the type of shoe that doesn't have a pair.\nConstraints:\n- 1 ≤ N ≤ 100,000\n- 0 ≤ type ≤ 100,000\nExample:\nInput:\n3\n1\n2\n1\nOutput:\n2\nExplanation:\nFor this case, we have three shoes [1, 2, 1]. So we have two shoes of type 1, but only one shoe of type 2. Thus one shoe of type 2 is missing.",
        "answer": "import java.util.*;\n\npublic class MissingShoe {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n\n        Map<Integer, Integer> countMap = new HashMap<>();\n\n        for (int i = 0; i < N; i++) {\n            int type = sc.nextInt();\n            countMap.put(type, countMap.getOrDefault(type, 0) + 1);\n        }\n\n        boolean found = false;\n        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() % 2 != 0) {\n                System.out.println(entry.getKey());\n                found = true;\n                break; // There should be only one missing shoe\n            }\n        }\n\n        if (!found) {\n            System.out.println(\"None\");\n        }\n    }\n}\n"
    },
    "46": {
        "question": "You are creating an application for electronic voting system and are \nrequired to validate the age of voter by implementing a class\nValidation which consist of a method boolean validateAge(int). This\nmethod takes an integer age and returns true if the age above 17 and\nis eligible to vote and returns false if the age 17 or below and he/she\nis ineligible to vote. If the age is 0 then throw an exception \n\"Age cannot be zero\" and if the age is <0 then throw the exception\n\"Age cannot be negative\"\nWrite the method boolean validateAge(int age) in class Validation\nand return appropriate boolean value or exception as defined above.",
        "answer": "class Validation {\n\n    public boolean validateAge(int age) throws Exception {\n        if (age == 0) {\n            throw new Exception(\"Age cannot be zero\");\n        } else if (age < 0) {\n            throw new Exception(\"Age cannot be negative\");\n        } else if (age > 17) {\n            return true; // Eligible to vote\n        } else {\n            return false; // Ineligible to vote\n        }\n    }\n\n    // Optional main method for testing\n    public static void main(String[] args) {\n        Validation v = new Validation();\n        int[] testAges = {0, -5, 16, 18};\n\n        for (int age : testAges) {\n            try {\n                boolean eligible = v.validateAge(age);\n                System.out.println(\"Age \" + age + \": \" + eligible);\n            } catch (Exception e) {\n                System.out.println(\"Age \" + age + \": \" + e.getMessage());\n            }\n        }\n    }\n}\n"
    },
    "47": {
        "question": "Given a class “janDhanAccount” with fields “accountNumber” and “balance” and a method “deposit()” that adds an amount to the balance. This account is allowed to have zero balance. toString() method will print the account details(Account no:1000 has a balance of:12000.0).\nCreate a subclass “CurrentAccount” that extends “janDhanAccount” and adds a field “overDraftLimit” and a method “withdraw(amount)” that subtracts an amount from the balance. overDraftLimit is the amount upto which they can withdraw beyond zero balance.  withdraw() should return  balance after successful withdrawal or -1 the amount exceeds overDraftLimit.  toString() method to return maximum amount that can be withdrawn in addition to account details(Account no:1000 has a balance of:2000.0 maximum that can be withdrawn:7000.0).",
        "answer": "// Base class\nclass janDhanAccount {\n    protected int accountNumber;\n    protected double balance;\n\n    public janDhanAccount(int accountNumber, double balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    @Override\n    public String toString() {\n        return \"Account no:\" + accountNumber + \" has a balance of:\" + balance;\n    }\n}\n\n// Subclass\nclass CurrentAccount extends janDhanAccount {\n    private double overDraftLimit;\n\n    public CurrentAccount(int accountNumber, double balance, double overDraftLimit) {\n        super(accountNumber, balance);\n        this.overDraftLimit = overDraftLimit;\n    }\n\n    // Withdraw method considering overdraft\n    public double withdraw(double amount) {\n        if (balance - amount >= -overDraftLimit) {\n            balance -= amount;\n            return balance;\n        } else {\n            return -1; // Exceeds overdraft limit\n        }\n    }\n\n    @Override\n    public String toString() {\n        double maxWithdrawable = balance + overDraftLimit;\n        return super.toString() + \" maximum that can be withdrawn:\" + maxWithdrawable;\n    }\n\n    // Optional main method to test\n    public static void main(String[] args) {\n        CurrentAccount acc = new CurrentAccount(1000, 2000, 5000);\n        System.out.println(acc); // Account details\n\n        double result = acc.withdraw(6000);\n        if (result != -1) {\n            System.out.println(\"Withdrawal successful. Remaining balance: \" + result);\n        } else {\n            System.out.println(\"Withdrawal exceeds overdraft limit.\");\n        }\n\n        System.out.println(acc); // Updated account details\n    }\n}\n"
    },
    "48": {
        "question": "A positive whole number 'n' that has 'd' number of digits is squared and split into two pieces, a right-hand piece that has 'd' digits and a left-hand piece that has remaining 'd' or 'd-1' digits. If the sum of the two pieces is equal to the number, then 'n' is a Kaprekar number.\nE.g: take number 45. 45 square = 2025. Since 45 is a 2 digit number split 2025 as 20 and 25. Now 20 + 25 = 45 which is the original number.\nHence 45 is a Kaprekar number.\nWrite a java program that will take a number from user and check if the number is a kaprekar number or not.\nSample Input: 45\nOutput: 45 is a kaprekar number\nSample Input: 44\nOutput: 44 is not a kaprekar number",
        "answer": "import java.util.Scanner;\n\npublic class KaprekarCheck {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n\n        if (isKaprekar(n)) {\n            System.out.println(n + \" is a kaprekar number\");\n        } else {\n            System.out.println(n + \" is not a kaprekar number\");\n        }\n    }\n\n    static boolean isKaprekar(int n) {\n        if (n == 1) return true; // 1 is a Kaprekar number\n\n        int d = String.valueOf(n).length();\n        long square = (long) n * n; // Use long to avoid overflow\n        String str = String.valueOf(square);\n\n        // Split the square into left and right parts\n        int len = str.length();\n        String rightPart = str.substring(len - d);\n        String leftPart = len - d > 0 ? str.substring(0, len - d) : \"0\";\n\n        int sum = Integer.parseInt(leftPart) + Integer.parseInt(rightPart);\n        return sum == n;\n    }\n}\n"
    },
    "49": {
        "question": "A positive whole number 'n' that has 'd' number of digits is squared and split into two pieces, a right-hand piece that has 'd' digits and a left-hand piece that has remaining 'd' or 'd-1' digits. If the sum of the two pieces is equal to the number, then 'n' is a Kaprekar number.\nE.g: take number 45. 45 square = 2025. Since 45 is a 2 digit number split 2025 as 20 and 25. Now 20 + 25 = 45 which is the original number.\nHence 45 is a Kaprekar number.\nWrite a java program that will take a number from user and check if the number is a kaprekar number or not.\nSample Input: 45\nOutput: 45 is a kaprekar number\nSample Input: 44\nOutput: 44 is not a kaprekar number",
        "answer": "import java.util.Scanner;\n\npublic class KaprekarNumber {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n\n        if (isKaprekar(n)) {\n            System.out.println(n + \" is a kaprekar number\");\n        } else {\n            System.out.println(n + \" is not a kaprekar number\");\n        }\n    }\n\n    static boolean isKaprekar(int n) {\n        if (n == 1) return true; // 1 is a Kaprekar number\n\n        int d = String.valueOf(n).length();\n        long square = (long) n * n; // Use long to avoid overflow\n        String str = String.valueOf(square);\n\n        // Split square into right and left parts\n        int len = str.length();\n        String right = str.substring(len - d);\n        String left = len - d > 0 ? str.substring(0, len - d) : \"0\";\n\n        int sum = Integer.parseInt(left) + Integer.parseInt(right);\n        return sum == n;\n    }\n}\n"
    },
    "50": {
        "question": "Given a string, write a program to find the number of occurrences of every vowel and print the count in the same format as sample test cases . Note: Input contains only lower case letters.\nSample Input - education \nSample Output - a1 e1 i1 o1 u1 \nSample Input - beautiful \nSample Output - a1 e1 i1 o0 i1",
        "answer": "import java.util.Scanner;\n\npublic class VowelCount {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String str = sc.nextLine();\n\n        // Initialize counts for each vowel\n        int aCount = 0, eCount = 0, iCount = 0, oCount = 0, uCount = 0;\n\n        // Count vowels\n        for (char c : str.toCharArray()) {\n            switch (c) {\n                case 'a': aCount++; break;\n                case 'e': eCount++; break;\n                case 'i': iCount++; break;\n                case 'o': oCount++; break;\n                case 'u': uCount++; break;\n            }\n        }\n\n        // Print counts in the required format\n        System.out.println(\"a\" + aCount + \" e\" + eCount + \" i\" + iCount + \" o\" + oCount + \" u\" + uCount);\n    }\n}\n"
    },
    "51": {
        "question": "Write a program to count the number of times a character occurs in a given sentence. Your program should read an input from the user that has a single character, a blank space followed by a sentence all on the same line\nSample input: o Write a program to count\nSample output: o occurs 3 times\nSample input: a apple is a fruit\nSample output: a occurs 2 times",
        "answer": "import java.util.Scanner;\n\npublic class CharCountInSentence {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String line = sc.nextLine();\n\n        // First character is the character to count, rest is the sentence\n        char targetChar = line.charAt(0);\n        String sentence = line.substring(2); // Skip character and the space\n\n        int count = 0;\n        for (char c : sentence.toCharArray()) {\n            if (c == targetChar) count++;\n        }\n\n        System.out.println(targetChar + \" occurs \" + count + \" times\");\n    }\n}\n"
    },
    "52": {
        "question": "You’re given a non-empty string made in its entirety from opening and closing braces. Your task is to find the minimum number of “operations” needed to make the string balanced. The definition for being balanced is as follows:\nAn empty string is balanced.\nIf S is balanced, then {S} is also balanced.\nIf S and T are both balanced, then ST (the concatenation of the two) is also balanced.\nAll of these strings are balanced: {}, {}{}, and {{}{}}; But none of these: }{, {{}{, nor {}{{.\n The only operation allowed on the string is to replace an opening brace with a closing brace, or vice-versa.\nInput\nA single line consists of non-empty string of opening and closing braces and nothing else. No string has more than 500 braces. All sequences are of even length.\nOutput\nN - the minimum number of operations needed to convert the given string into a balanced one.",
        "answer": "import java.util.Scanner;\n\npublic class MinOperationsToBalance {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n\n        int open = 0;  // Count of unmatched '{'\n        int close = 0; // Count of unmatched '}'\n\n        for (char c : s.toCharArray()) {\n            if (c == '{') {\n                open++; // an opening brace adds to unmatched '{'\n            } else { // c == '}'\n                if (open > 0) {\n                    open--; // match with a previous '{'\n                } else {\n                    close++; // unmatched '}', needs to be replaced\n                }\n            }\n        }\n\n        // Each unmatched '{' or '}' needs half replacements\n        int operations = (open + 1) / 2 + (close + 1) / 2;\n\n        System.out.println(operations);\n    }\n}\n"
    },
    "53": {
        "question": "Write a java program to print the number of occurrences of a sub array in an array. The input contains four lines. The first line specifies n, the number of elements in the main array. The second line specifies n integers separated by space. The third line contains k, the size of sub-array and the fourth line contains k integers forming the sub-array.\nSample: Input:\n10\n1 2 3 4 2 3 7 2 3 10\n2\n2 3\nOutput:\n3",
        "answer": "import java.util.Scanner;\n\npublic class SubArrayOccurrences {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Read main array\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        // Read sub-array\n        int k = sc.nextInt();\n        int[] sub = new int[k];\n        for (int i = 0; i < k; i++) {\n            sub[i] = sc.nextInt();\n        }\n\n        // Count occurrences\n        int count = 0;\n        for (int i = 0; i <= n - k; i++) {\n            boolean match = true;\n            for (int j = 0; j < k; j++) {\n                if (arr[i + j] != sub[j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) count++;\n        }\n\n        System.out.println(count);\n    }\n}\n"
    },
    "54": {
        "question": "Write a program that reads in a String. If a word in the String contains a numeral n (0 < n < 10) then your program must replace that numeral by the character that follows the numeral repeated n times. It can be assumed that there is no numeral at the end of any word. \nSample Input: \nI wo3rk a2t Ig5ni6te. \nSample Output: \nI worrrk att Ignnnnnitttttte.",
        "answer": "import java.util.Scanner;\n\npublic class NumeralRepeater {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n\n            if (Character.isDigit(c) && c != '0') { // check for numeral 1-9\n                int n = c - '0'; // convert char to int\n                char nextChar = input.charAt(i + 1);\n                // Repeat nextChar n times\n                for (int j = 0; j < n; j++) {\n                    result.append(nextChar);\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        System.out.println(result.toString());\n    }\n}\n"
    },
    "55": {
        "question": "Given a sentence, write a program to arrange and print the words in the sentence such that the last letter of the previous word is same as the first letter of the next word. Assume the first word is correctly placed in order and start arranging the others.\nSample Input:\nmediocre yielding dedication nationality educated\nSample Output:\nmediocre educated dedication nationality yielding",
        "answer": "import java.util.*;\n\npublic class ArrangeWordsByLetter {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String line = sc.nextLine();\n        String[] words = line.split(\" \");\n\n        List<String> wordList = new ArrayList<>(Arrays.asList(words));\n        List<String> arranged = new ArrayList<>();\n\n        // Start with the first word\n        arranged.add(wordList.get(0));\n        wordList.remove(0);\n\n        while (!wordList.isEmpty()) {\n            boolean found = false;\n            String lastWord = arranged.get(arranged.size() - 1);\n            char lastChar = lastWord.charAt(lastWord.length() - 1);\n\n            for (int i = 0; i < wordList.size(); i++) {\n                String word = wordList.get(i);\n                if (word.charAt(0) == lastChar) {\n                    arranged.add(word);\n                    wordList.remove(i);\n                    found = true;\n                    break;\n                }\n            }\n\n            // If no matching word found, just append the next word\n            if (!found) {\n                arranged.add(wordList.get(0));\n                wordList.remove(0);\n            }\n        }\n\n        // Print the arranged words\n        for (String w : arranged) {\n            System.out.print(w + \" \");\n        }\n    }\n}\n"
    },
    "56": {
        "question": "Vidyaranya has an obsession for arranging everything in lexicographic order. So he asks his student, Vinod to write a program to find the lexicographically smallest and largest substring of length k. Help Vinod to write the program.\n[Note: Lexicographic order is also known as dictionary order. So \"ball\" is smaller than \"cat\" as ball appears before cat in dictionary. Similarly \"dog\" is smaller than \"dorm\".]\nInput: \nThe first line contains string. The second line contains an integer k, which will be the length of substring.\nOutput: \nPrint the lexicographically smallest substring in the first line and lexicographically largest substring in the second line.\nSample Input:\nwelcometojava\n3\nSample Output:\nava\nwel",
        "answer": "import java.util.Scanner;\n\npublic class LexicographicSubstring {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        String str = sc.nextLine();\n        int k = sc.nextInt();\n\n        String smallest = str.substring(0, k);\n        String largest = str.substring(0, k);\n\n        for (int i = 1; i <= str.length() - k; i++) {\n            String sub = str.substring(i, i + k);\n            if (sub.compareTo(smallest) < 0) {\n                smallest = sub;\n            }\n            if (sub.compareTo(largest) > 0) {\n                largest = sub;\n            }\n        }\n\n        System.out.println(smallest);\n        System.out.println(largest);\n    }\n}\n"
    },
    "57": {
        "question": "Mr. Vipareeth and Ms. Ulta Pulta are fellow programmers and in line with their software profession, often get into some cranky discussions. During one such discussion, Vipareeth said that he could read any number correctly, even through a mirror. Ulta thought of putting him at his\nwit's end and wrote a series of numbers and asked him to read and sort them correctly.\nWrite a program that would make Vipareeth proud. The input to your program is:\n1) First line is an integer specifying the number of trials t (1 <= t <= 10)\n2) Second line is an integer giving the count (c) of reversed numbers\n   (2 <= c <= 100)\n3) Third line contains space separated c numbers written in reverse order.\nAssume, all the numbers are positive integers. No number starts with a zero.\nYour program should output the numbers in ascending order.\nSample Input:\n3\n4\n21 31 41 51\n2\n29 54\n5\n19 18 17 16 15\nSample Output:\n12 13 14 15\n45 92\n51 61 71 81 91",
        "answer": "import java.util.*;\n\npublic class MirrorNumbersSort {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt(); // number of trials\n\n        for (int trial = 0; trial < t; trial++) {\n            int c = sc.nextInt(); // number of reversed numbers\n            int[] numbers = new int[c];\n\n            for (int i = 0; i < c; i++) {\n                String reversed = sc.next(); // read number as string\n                String original = new StringBuilder(reversed).reverse().toString(); // reverse it\n                numbers[i] = Integer.parseInt(original); // convert to int\n            }\n\n            // Sort the numbers\n            Arrays.sort(numbers);\n\n            // Print in ascending order\n            for (int i = 0; i < c; i++) {\n                System.out.print(numbers[i]);\n                if (i < c - 1) System.out.print(\" \");\n            }\n            System.out.println();\n        }\n    }\n}\n"
    },
    "58": {
        "question": "In an array if the elements of an array and the index of an array are both prime, then it is considered as prime index element.\nWrite a program to list out all the prime index elements in an array.\nInput Specification: \nFirst line of input will be the size of an array (2<=size<100)\nSecond line will be the elements of an array\nOutput Specification:\nShow the total number of prime index elements in the first line.\nSecond line onwards, print two integers separated by space, first integer is the prime number and the second integer is its array index. Array index starts at zero.\nNOTE: Consider that the array which you take as input will contain at least one prime index element.\nSample Input: \n5\n2 3 5 7 11\nSample Output: \n2\n5 2\n7 3",
        "answer": "import java.util.Scanner;\n\npublic class PrimeIndexElements {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int size = sc.nextInt();\n        int[] arr = new int[size];\n\n        for (int i = 0; i < size; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        int count = 0;\n        StringBuilder output = new StringBuilder();\n\n        for (int i = 2; i < size; i++) { // index starts from 0, so first prime index is 2\n            if (isPrime(i) && isPrime(arr[i])) {\n                count++;\n                output.append(arr[i]).append(\" \").append(i).append(\"\\n\");\n            }\n        }\n\n        System.out.println(count);\n        System.out.print(output.toString());\n    }\n\n    // Helper method to check if a number is prime\n    private static boolean isPrime(int n) {\n        if (n < 2) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n"
    },
    "59": {
        "question": "An Evil number is a positive whole number which has even number of 1’s in its binary equivalent.\n\n\n\n\nExample: Binary equivalent of 9 is 1001, which contains even number of 1’s. A few evil numbers are 3, 5, 6, 9…. Design a program to accept a positive whole number and find the binary equivalent of the number and count the number of 1’s in it and display whether it is a Evil number or not with an appropriate message. Output the result in format given below (binary equivalent is printed along with the result)\n\n\n\n\nInput specification:\n\nThe first line contains a number to check for evil number\n\n\n\n\nOutput Specification:\n\nBinary equivalent of the input number along with “ is an evil number” or “ is not an evil number’.\n\n\n\n\nSample Input - 1: 15\n\nSample Output - 1: 1111 is an evil number\n\n\n\n\nSample Input - 2: 26\n\nSample Output - 2: 11010 is not an evil number",
        "answer": "import java.util.Scanner;\n\npublic class EvilNumberChecker {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int num = sc.nextInt();\n\n        String binary = Integer.toBinaryString(num); // get binary equivalent\n        int countOnes = 0;\n\n        // Count number of 1's in binary string\n        for (char c : binary.toCharArray()) {\n            if (c == '1') countOnes++;\n        }\n\n        // Check if count of 1's is even\n        if (countOnes % 2 == 0) {\n            System.out.println(binary + \" is an evil number\");\n        } else {\n            System.out.println(binary + \" is not an evil number\");\n        }\n    }\n}\n"
    },
    "60": {
        "question": "Write a program for print numbers from 0 to n.\n\n\n\n\ninput:\n\n3\n\n\n\n\noutput:\n\n0\n\n1\n\n2\n\n3",
        "answer": "import java.util.Scanner;\n\npublic class PrintNumbers {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n\n        for (int i = 0; i <= n; i++) {\n            System.out.println(i);\n        }\n    }\n}\n"
    },
    "61": {
        "question": "Write a recursive function sumArray that sums the values of all elements in the array.  Use the following function definition:\n int sumArray(int [] arr, int startIndex);\ne.g  if int [] a ={1,2,3,4,5} then  \nsumArray(a,0) should return 15",
        "answer": "public class RecursiveArraySum {\n\n    // Recursive function to sum array elements\n    public static int sumArray(int[] arr, int startIndex) {\n        if (startIndex >= arr.length) {\n            return 0; // Base case: no more elements to add\n        }\n        return arr[startIndex] + sumArray(arr, startIndex + 1); // Recursive case\n    }\n\n    public static void main(String[] args) {\n        int[] a = {1, 2, 3, 4, 5};\n        int sum = sumArray(a, 0);\n        System.out.println(\"Sum of array elements: \" + sum);\n    }\n}\n"
    },
    "62": {
        "question": "Piglatin is a way of encoding an english word using the below rules:\ni) Words that begin with a vowel are concatenated with \"Y\" . For example, EUROPE becomes EUROPEY. \nii) Words that contain a vowel in between should have the first part from the position of the vowel till end, followed by the part of the string from beginning till position of the vowel and is concatenated by \"D\". For example PROJECT becomes OJECTPRD. \niii) Words which do not contain a vowel are concatenated with \"N\". For example, SKY becomes SKYN. \nDesign a class PigLatin to do the above task.  Details of the instance variables and methods are given below:\nclass name :  PigLatin\ninstance variables:\nTxt\t\t : to store a word \nCxt \t\t : to store the rearranged word \nlen \t\t : to store the length of the word \nMember functions /methods\nPigLatin() \t\t: constructor to initialize the instance variables \nvoid getWord()\t : to accept the word from user and store it in Txt\nvoid convert2PigLatin() \t : converts the word into piglatin form and stores it in Cxt \nString toString() \t \t : return the original and the changed word",
        "answer": "import java.util.Scanner;\n\nclass PigLatin {\n    // Instance variables\n    private String Txt;  // original word\n    private String Cxt;  // piglatin word\n    private int len;     // length of the word\n\n    // Constructor to initialize instance variables\n    public PigLatin() {\n        Txt = \"\";\n        Cxt = \"\";\n        len = 0;\n    }\n\n    // Method to accept word from user\n    public void getWord() {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter a word: \");\n        Txt = sc.next();\n        len = Txt.length();\n    }\n\n    // Method to convert word to Pig Latin\n    public void convert2PigLatin() {\n        String upperTxt = Txt.toUpperCase(); // convert to uppercase for uniformity\n        char firstChar = upperTxt.charAt(0);\n\n        // Check if first character is a vowel\n        if (isVowel(firstChar)) {\n            Cxt = upperTxt + \"Y\"; // Rule i\n            return;\n        }\n\n        // Find the first vowel in the word\n        int vowelPos = -1;\n        for (int i = 1; i < len; i++) {\n            if (isVowel(upperTxt.charAt(i))) {\n                vowelPos = i;\n                break;\n            }\n        }\n\n        if (vowelPos != -1) {\n            // Rule ii: split and rearrange\n            String part1 = upperTxt.substring(vowelPos);\n            String part2 = upperTxt.substring(0, vowelPos);\n            Cxt = part1 + part2 + \"D\";\n        } else {\n            // Rule iii: no vowels\n            Cxt = upperTxt + \"N\";\n        }\n    }\n\n    // Helper method to check if a character is a vowel\n    private boolean isVowel(char ch) {\n        return \"AEIOU\".indexOf(ch) != -1;\n    }\n\n    // toString method to return original and Pig Latin word\n    public String toString() {\n        return \"Original word: \" + Txt + \"\\nPig Latin: \" + Cxt;\n    }\n\n    // Main method to test\n    public static void main(String[] args) {\n        PigLatin pl = new PigLatin();\n        pl.getWord();\n        pl.convert2PigLatin();\n        System.out.println(pl.toString());\n    }\n}\n"
    },
    "63": {
        "question": "Write a java program to find out whether the given string is a palindrome or not.\nSample Input: madam\nSample Output: true\nSample Input: dam\nSample Output: false",
        "answer": "import java.util.Scanner;\n\npublic class PalindromeCheck {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String str = sc.nextLine();\n\n        boolean isPalindrome = checkPalindrome(str);\n        System.out.println(isPalindrome);\n    }\n\n    // Method to check palindrome\n    public static boolean checkPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false; // mismatch found\n            }\n            left++;\n            right--;\n        }\n        return true; // no mismatch found\n    }\n}\n"
    },
    "64": {
        "question": "Given an array of integers, find the average of all the elements counting only the unique occurrances of each element. This means that if an element occurs multiple times, then you must only use it once while calculating the average. Input Specification: First line will contain 'n' indicating the size of the array. Followed by n elements of array Output: The integer average of all the elements counting only the unique occurrences.\nSample input:\n4\n1 1 2 3\nSample Output: \n2\nExplanation: 1+2+3=6/3=2",
        "answer": "import java.util.*;\n\npublic class UniqueAverage {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        // Use a Set to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>();\n        for (int num : arr) {\n            uniqueSet.add(num);\n        }\n\n        // Calculate sum of unique elements\n        int sum = 0;\n        for (int num : uniqueSet) {\n            sum += num;\n        }\n\n        // Calculate integer average\n        int average = sum / uniqueSet.size();\n\n        System.out.println(average);\n    }\n}\n"
    },
    "65": {
        "question": "Write a program to left shift a given array by \"k\"\nInput Specification:\nline 1 size of array line 2 elements of array line 3 value of k\nOutput specification \nshifted array\nSample Input:\n5\n2 3 4 6 7\n4\nSample Output: \n7 2 3 4 6",
        "answer": "import java.util.*;\n\npublic class LeftShiftArray {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Read array size\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n\n        // Read array elements\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        // Read k (number of positions to shift)\n        int k = sc.nextInt();\n\n        // Ensure k is within bounds\n        k = k % n;\n\n        // Shift array\n        int[] shifted = new int[n];\n        for (int i = 0; i < n; i++) {\n            shifted[i] = arr[(i + k) % n];\n        }\n\n        // Print shifted array\n        for (int num : shifted) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n"
    },
    "66": {
        "question": "An Crazy number is an n-digit positive number such that the sum of its digits raised to the power n is the number itself.\nWrite a java program to check whether a number is Crazy number or not.\nInput Specification: First input is an interger t denotes number of test cases. Next there will be t lines denoting t test cases. Each test case line will have a number N for which you have to check whether it is Crazy Number of not.\nConstraints:  0 < t < 2^31 \nOutput Specification: Output contains t lines. ith line output will be either it is a crazy number or not depending on the number in ith test case.\nConstraints: 0 < N < 2^63\nSample Input:\n3\n153\n12\n1634\nSample Output:\n153 is a crazy number\n12 is not a crazy number\n1634 is a crazy number\nExplanation:\n153 is a 3 digit number. So 1^3 + 5^3 + 3^3 = = 1 + 125 + 27 = 153. So, 153 is Crazy number.\n12 is a 2 digit number. So 1^2 + 2^2 = 1 + 4 = 5 != 12. So, 12 is not a Crazy number.\n1634 is a 4 digit number. So 1^4 + 6^4 + 3^4 + 4^4 = 1 + 1296 + 81 + 256 = 1634. So, 1634 is a Crazy number.\nThe code should be able to give output for 10 digit numbers as well.",
        "answer": "import java.util.Scanner;\n\npublic class CrazyNumber {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Number of test cases\n        int t = sc.nextInt();\n\n        for (int i = 0; i < t; i++) {\n            long num = sc.nextLong();\n            if (isCrazyNumber(num)) {\n                System.out.println(num + \" is a crazy number\");\n            } else {\n                System.out.println(num + \" is not a crazy number\");\n            }\n        }\n    }\n\n    // Method to check if a number is Crazy\n    public static boolean isCrazyNumber(long n) {\n        String str = String.valueOf(n);\n        int digits = str.length();\n        long sum = 0;\n\n        for (int i = 0; i < digits; i++) {\n            int digit = str.charAt(i) - '0';\n            sum += power(digit, digits);\n        }\n\n        return sum == n;\n    }\n\n    // Custom method to calculate power to avoid floating point errors\n    public static long power(int base, int exp) {\n        long result = 1;\n        for (int i = 0; i < exp; i++) {\n            result *= base;\n        }\n        return result;\n    }\n}\n"
    },
    "67": {
        "question": "You are creating an application for a local body election which requires to validate the age \nof the voter to be 18 or above  by implementing a class AgeValidation which consist \nof a method boolean validateAge(int age).\nThis method takes an integer age and returns true if the age is 18 or above and returns false if \nage is between 1 and 17 else  throw InvalidAgeException with the message \"age xx is Invalid\" \nWrite a custom exception and the method boolean validateAge(int mm, int dd) in class AgeValidation\nand return appropriate boolean value or exception as defined above",
        "answer": "import java.util.Scanner;\n\n// Custom Exception class\nclass InvalidAgeException extends Exception {\n    public InvalidAgeException(String message) {\n        super(message);\n    }\n}\n\n// AgeValidation class\nclass AgeValidation {\n\n    // Method to validate age\n    public boolean validateAge(int age) throws InvalidAgeException {\n        if (age <= 0) {\n            throw new InvalidAgeException(\"age \" + age + \" is Invalid\");\n        } else if (age < 18) {\n            return false; // Not eligible\n        } else {\n            return true; // Eligible\n        }\n    }\n}\n\npublic class VoterEligibility {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        AgeValidation validator = new AgeValidation();\n\n        System.out.print(\"Enter age: \");\n        int age = sc.nextInt();\n\n        try {\n            boolean eligible = validator.validateAge(age);\n            if (eligible) {\n                System.out.println(\"Eligible to vote\");\n            } else {\n                System.out.println(\"Not eligible to vote\");\n            }\n        } catch (InvalidAgeException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"
    },
    "68": {
        "question": "Write a Program in Java to input a number and check whether it is an Automorphic Number or not. Note: An automorphic number is a number which is present in the last digit(s) of its square. Example: 6 is an automorphic number as its square is 36 and 6 is present as the last digit.\n\n\n\n\nSample Input: 6\n\nSample Output: 6 is an automorphic number\n\n\n\n\nSample Input: 4\n\nSample Output: 4 is not an automorphic number",
        "answer": "import java.util.Scanner;\n\npublic class AutomorphicNumber {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        System.out.print(\"Enter a number: \");\n        int num = sc.nextInt();\n\n        if (isAutomorphic(num)) {\n            System.out.println(num + \" is an automorphic number\");\n        } else {\n            System.out.println(num + \" is not an automorphic number\");\n        }\n    }\n\n    // Method to check if a number is automorphic\n    public static boolean isAutomorphic(int n) {\n        int square = n * n;\n        int temp = n;\n\n        // Compare last digits of square with number\n        while (temp > 0) {\n            if (temp % 10 != square % 10) {\n                return false;\n            }\n            temp /= 10;\n            square /= 10;\n        }\n\n        return true;\n    }\n}\n"
    },
    "69": {
        "question": "An arithmetic progression (AP) is a sequence of numbers such that the difference of any two successive members of the sequence is a constant. For instance, the sequence 3, 5, 7, 9, 11, 13 ... is an arithmetic progression with common difference 2. For this problem, we will limit ourselves to arithmetic progression whose common difference is a non-zero integer. On the other hand, a geometric progression (GP) is a sequence of numbers where each term after the first is found by multiplying the previous one by a fixed non-zero number called the common ratio. For example, the sequence 2, 6, 18, 54 ... is a geometric progression with common ratio 3. For this problem, we will limit ourselves to geometric progression whose common ratio is a non-zero integer. Given three successive members of a sequence, you need to determine the type of the progression and the next successive member. Input is specified on a single line with three integers (−10, 000 < a1, a2, a3 < 10, 000) where a1, a2, and a3 are distinct. Output For each input, you program must print a single line of the form: XX v where XX is either AP or GP depending on if the given progression is an Arithmetic or Geometric Progression. v is the next member of the given sequence. All input cases are guaranteed to be either an arithmetic or geometric progressions.\n\n\n\n\nExample 1:\n\nInput 7 9 11\n\nOutput: AP 13\n\n\n\n\nExample 2:\n\nInput: 2 6 18\n\nOutput: GP 54",
        "answer": "import java.util.Scanner;\n\npublic class ProgressionType {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Read three integers\n        int a1 = sc.nextInt();\n        int a2 = sc.nextInt();\n        int a3 = sc.nextInt();\n\n        // Check for AP\n        if ((a2 - a1) == (a3 - a2)) {\n            int d = a2 - a1;          // common difference\n            int next = a3 + d;        // next term in AP\n            System.out.println(\"AP \" + next);\n        }\n        // Otherwise it's GP\n        else if ((a2 / a1) == (a3 / a2)) {\n            int r = a2 / a1;          // common ratio\n            int next = a3 * r;        // next term in GP\n            System.out.println(\"GP \" + next);\n        }\n    }\n}\n"
    },
    "70": {
        "question": "On a Mobile Key Pad the letters are mapped to the digits like following : ABC(2), DEF(3), GHI(4), JKL(5), MNO(6), PQRS(7), TUV(8), WXYZ(9) Write a program which will take a String as input and the output will be a sequence of digits according to the mentioned mapping. Note: You can assume that the input will not contain more than 10 letters and all the letters will be in upper case Input Specification: Input will contain one line containing string in uppercase without spaces Output: Output should contain single line specifying the numbers corresponding to the characters in the string\n\n\n\n\nSample Input : JAVA\n\nSample Output: 5282",
        "answer": "import java.util.Scanner;\n\npublic class MobileKeypad {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();  // Read input string\n\n        StringBuilder output = new StringBuilder();\n\n        for (int i = 0; i < input.length(); i++) {\n            char ch = input.charAt(i);\n\n            if (ch >= 'A' && ch <= 'C') output.append('2');\n            else if (ch >= 'D' && ch <= 'F') output.append('3');\n            else if (ch >= 'G' && ch <= 'I') output.append('4');\n            else if (ch >= 'J' && ch <= 'L') output.append('5');\n            else if (ch >= 'M' && ch <= 'O') output.append('6');\n            else if (ch >= 'P' && ch <= 'S') output.append('7');\n            else if (ch >= 'T' && ch <= 'V') output.append('8');\n            else if (ch >= 'W' && ch <= 'Z') output.append('9');\n        }\n\n        System.out.println(output);\n    }\n}\n"
    },
    "71": {
        "question": "The game of bus-bus is played by a set of people, who form a circle. One of the persons in the circle has to say 'one', the next person should say 'two' and so on. Whenever a person gets a number, which is either divisible by seven or ends with seven, he/she should say 'Bus' instead of the number. If the number in turn is both visible by seven and ends with a seven, then 'BusBus' should be uttered. Any one who violates the rule is taken out of the circle and the game continues with the remaining persons. The last one remaining is the winner of the game. Write a program to simulate this game. Input to your program is n (10 <= n <= 100) upto which the above rule should be followed.\n\n\n\n\nSample input: 20\n\nSample output:\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nBusBus\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\nBus\n\n15\n\n16\n\nBus\n\n18\n\n19\n\n20",
        "answer": "import java.util.Scanner;\n\npublic class BusBusGame {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        \n        for (int i = 1; i <= n; i++) {\n            boolean divisible = (i % 7 == 0);\n            boolean endsWith7 = (i % 10 == 7);\n\n            if (divisible && endsWith7)\n                System.out.println(\"BusBus\");\n            else if (divisible || endsWith7)\n                System.out.println(\"Bus\");\n            else\n                System.out.println(i);\n        }\n    }\n}\n"
    },
    "72": {
        "question": "Write a program to input a year and check whether it is a Leap year or not.\n\n\n\n\nSample Input: 2000\n\nSample Output: 2000 is a leap year\n\n\n\n\nSample Input: 2001\n\nSample Output: 2001 is not a leap year",
        "answer": "import java.util.Scanner;\n\npublic class LeapYearCheck {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int year = sc.nextInt();\n\n        if ((year % 400 == 0) || (year % 4 == 0 && year % 100 != 0)) {\n            System.out.println(year + \" is a leap year\");\n        } else {\n            System.out.println(year + \" is not a leap year\");\n        }\n    }\n}\n"
    },
    "73": {
        "question": "Shivani does scheduling for Ignite training program. She wants to optimize the schedule for the coming week in a way that all batches get same number of lab and zone hours. For that, she has to find out the count of lab hours and zone hours each batch is getting in a day. So, she wants you to help her.Input Specification :The first line will contain name of the batch.Second line contains a string having 40 characters (L for Labs, Z for Zones, S for Session) assuming 8 hours in a day and 5 days in a week.Output Specification :Batch NameDay wise Count of Lab hours and zone hours for that batch.Print “Invalid Input” if input is invalid Sample input :A3L L L S S S Z Z Z Z S S L L L L L L L L S S Z Z Z Z S S L L L L L L L L S S Z Z Sample output :A3Monday: 3L 2ZWednesday: 4L 2ZTuesday: 4L 2ZFriday: 4L 2ZThursday: 4L 2Z",
        "answer": "import java.util.Scanner;\n\npublic class IgniteSchedule {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        String batchName = sc.nextLine().trim();\n        String schedule = sc.nextLine().replaceAll(\"\\\\s+\", \"\"); // remove spaces\n\n        // Validate input\n        if (schedule.length() != 40 || !schedule.matches(\"[LZS]+\")) {\n            System.out.println(\"Invalid Input\");\n            return;\n        }\n\n        String[] days = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"};\n        System.out.println(batchName);\n\n        for (int d = 0; d < 5; d++) {\n            String daySchedule = schedule.substring(d * 8, (d + 1) * 8);\n\n            int labs = 0, zones = 0;\n            for (char c : daySchedule.toCharArray()) {\n                if (c == 'L') labs++;\n                else if (c == 'Z') zones++;\n            }\n\n            System.out.println(days[d] + \": \" + labs + \"L \" + zones + \"Z\");\n        }\n    }\n}\n"
    },
    "74": {
        "question": "Write a program to input a list of integers in an array and arrange them in a way similar to the to-and-fro movement of a Pendulum. The minimum element out of the list of integers, must come in the center position of the array. The number in the ascending order next to the minimum, goes to the right, the next higher number goes to the left of minimum number and it continues. As higher numbers are reached, one goes to either side of the minimum value in a to-and-fro manner similar to that of a Pendulum.\n\n\n\n\nInput specification: The first line specifies n, the number of elements in the array followed by n elements\n\n\n\n\nOutput Specification: The elements arranged similarly to the pendulum movement starting with lowest in the middle\n\n\n\n\nSample Input 1:\n\n5\n\n3 2 5 4 1\n\nSample Output 1:\n\n5 3 1 2 4\n\nExplanation: Smallest value 1 comes in the middle. 2 to the right and 3 to the left of 1. 4 to the right of 2 and 5 to the left of 3 giving the movement of a pendulum.\n\n\n\n\nSample Input 2:\n\n5\n\n11 12 31 14 6\n\nSample Output 2:\n\n31 12 6 11 14",
        "answer": "import java.util.*;\n\npublic class PendulumArrangement {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        Arrays.sort(arr);  // Sort ascending\n\n        int[] pendulum = new int[n];\n        int mid = n / 2;   // Middle index\n        int left = mid - 1;\n        int right = mid + 1;\n\n        pendulum[mid] = arr[0];  // Smallest in center\n\n        boolean goRight = true;\n        for (int i = 1; i < n; i++) {\n            if (goRight) {\n                pendulum[right++] = arr[i];\n            } else {\n                pendulum[left--] = arr[i];\n            }\n            goRight = !goRight; // Alternate sides\n        }\n\n        // Print result\n        for (int x : pendulum) {\n            System.out.print(x + \" \");\n        }\n    }\n}\n"
    },
    "75": {
        "question": "In Piglatin a word such as KING is replaced by INGKAY, while TROUBLE becomes OUBLETRAY and so on. The first vowel of the original word becomes the start of the translation, any preceding letters being shifted towards the end and followed by AY. Words that begin with a vowel just add AY to it. Words that do not have vowels, leave them as is.\nSome examples of piglatin words are:\n“happy” → “appyhay”\n“duck” → “uckday”\n“egg” → “eggay”\n“inbox” → “inboxay”\n“sky” → “sky”\nWrite a program that takes in a sentence and encodes it into piglatin and prints the encoded sentence.\nExample1 Input: \nTime and tide wait for none \nOutput: \nimeTay anday idetay aitway orfay onenay\nExample 2 Input: \nSky is the limit\nOutput: \nSky isay ethay imitlay\nInput Specifications. \nThe first line contains the sentence to be encoded\nOutput Specification:\npiglatin encoded sentence",
        "answer": "import java.util.*;\n\npublic class PigLatin {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String sentence = sc.nextLine();\n\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            result.append(toPigLatin(word)).append(\" \");\n        }\n\n        System.out.println(result.toString().trim());\n    }\n\n    private static String toPigLatin(String word) {\n        String vowels = \"AEIOUaeiou\";\n        \n        // Case 1: If first letter is vowel\n        if (vowels.indexOf(word.charAt(0)) != -1) {\n            return word + \"ay\";\n        }\n\n        // Case 2: Find first vowel\n        for (int i = 0; i < word.length(); i++) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                return word.substring(i) + word.substring(0, i) + \"ay\";\n            }\n        }\n\n        // Case 3: No vowels\n        return word;\n    }\n}\n"
    },
    "76": {
        "question": "Write a Java program that will take a string as input and print the number of voweless substring(s) in that string as output.\nSample Input:\nabcdefgykkddfghie\nSample OUtput:\n2\nExplanation:\nAs we can clearly see the string starts with a vowel 'a' then there is a substring 'bcd' which is voweless after which again there is a vowel 'e' followed by voweless substring 'fgykkddfgh' again followed by vowels. So we have two voweless substring 'bcd' and 'fgykkddfgh'. Hence 2 is the output.\nHint: In the above case substring 'bcd' is between the vowels 'a' and 'e'. So consider bcd as one voweless substring instead of taking it as 'b','bc' or 'cd'. Assume that your input will contain atleast one voweless substring.",
        "answer": "import java.util.*;\n\npublic class VowelessSubstrings {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String str = sc.nextLine();\n\n        String vowels = \"aeiouAEIOU\";\n        int count = 0;\n        boolean inVoweless = false;\n\n        for (int i = 0; i < str.length(); i++) {\n            char ch = str.charAt(i);\n\n            if (vowels.indexOf(ch) != -1) {\n                // Current char is vowel → reset flag\n                inVoweless = false;\n            } else {\n                // Current char is consonant\n                if (!inVoweless) {\n                    // Start of a new voweless substring\n                    count++;\n                    inVoweless = true;\n                }\n            }\n        }\n\n        System.out.println(count);\n    }\n}\n"
    },
    "77": {
        "question": "Digit Counter Suman works with a firm where he has to count the number of digits given to him. Manual counting of digits takes a long time. So being a Graduate Trainee in TCS your job is to help shyam in digitizing the counting work given to him. So if the array is 12,44,85,65,88 then your job is to print the most occurred digit and the digit that never occurred. Digits to be counted will range from 0 to 9 In the above array, most occurred digit is 8 and digits that did not occur at all are 0,3,7,9. Write a java program to achieve the above mentioned problem Input Specification line one size of array (size between 1 and 100) followed by elements of array Output Specification Print the most occurred digit and digit that never occurred in two separate lines.\nSample Input: 4\n125 104 44 64\nSample Output:\nMost occurred digit : 4\nDigits that did not occur : 3,7,8,9\nNote: If there are two or more digits that has occurred more, than print the greater of them. (for e.g. if 4,5 are most occurred digit than print 5)",
        "answer": "import java.util.*;\n\npublic class DigitCounter {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        int n = sc.nextInt();\n        int[] freq = new int[10];  // digit frequency from 0–9\n\n        for (int i = 0; i < n; i++) {\n            int num = sc.nextInt();\n            String s = String.valueOf(num);\n            for (char ch : s.toCharArray()) {\n                if (Character.isDigit(ch)) {\n                    freq[ch - '0']++;\n                }\n            }\n        }\n\n        // Find most occurred digit (if tie, take greater one)\n        int mostDigit = -1, maxFreq = -1;\n        for (int d = 0; d <= 9; d++) {\n            if (freq[d] > maxFreq || (freq[d] == maxFreq && d > mostDigit)) {\n                maxFreq = freq[d];\n                mostDigit = d;\n            }\n        }\n\n        // Collect digits that never occurred\n        List<Integer> notOccurred = new ArrayList<>();\n        for (int d = 0; d <= 9; d++) {\n            if (freq[d] == 0) {\n                notOccurred.add(d);\n            }\n        }\n\n        // Output\n        System.out.println(\"Most occurred digit : \" + mostDigit);\n        System.out.print(\"Digits that did not occur : \");\n        for (int i = 0; i < notOccurred.size(); i++) {\n            System.out.print(notOccurred.get(i));\n            if (i < notOccurred.size() - 1) System.out.print(\",\");\n        }\n    }\n}\n"
    },
    "78": {
        "question": "You are given an array of N elements, which are initially all 0. After that you will be given C commands. The following are the two commands that are valid - A i j v – Add: you have to add v to all numbers from the positions i to j(both inclusive). P i j – Print: output a line containing a single integer which is the sum of all the array elements between i and j (both inclusive) Input In the first line you'll be given N (N <= 100) and C (C <= 10). After that you'll be given C commands in the format as mentioned above. 1 <=i, j <= N and 1 <= v <= 10^4. Output Print the answers of the queries.\n\nExample:\n\nInput:\n\n8 3\n\nA 2 5 15\n\nA 5 7 20\n\nP 4 5\n\n\n\n\nOutput: 50\n\n\n\n\nInitial array:- 0 0 0 0 0 0 0 0\n\nA 2 5 15 :- Add 15 to 2nd, 3rd, 4th and 5th element\n\nArray after step 1:- 0 15 15 15 15 0 0 0\n\n\n\n\nA 5 7 20:- Add 20 to 5th, 6th and 7th element\n\nArray after step 2:- 0 15 15 15 35 20 20 0\n\n\n\n\nThird command will print sum of 4th and 5th element. 15+35=50. If there are 2 Print commands, then there will be two output lines",
        "answer": "import java.util.*;\n\npublic class ArrayCommands {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int N = sc.nextInt();  // size of array\n        int C = sc.nextInt();  // number of commands\n        int[] arr = new int[N + 1]; // 1-based indexing\n\n        for (int c = 0; c < C; c++) {\n            String cmd = sc.next();\n            if (cmd.equals(\"A\")) {\n                int i = sc.nextInt();\n                int j = sc.nextInt();\n                int v = sc.nextInt();\n                for (int k = i; k <= j; k++) {\n                    arr[k] += v;\n                }\n            } else if (cmd.equals(\"P\")) {\n                int i = sc.nextInt();\n                int j = sc.nextInt();\n                int sum = 0;\n                for (int k = i; k <= j; k++) {\n                    sum += arr[k];\n                }\n                System.out.println(sum);\n            }\n        }\n    }\n}\n"
    },
    "79": {
        "question": "Write a  function isPrime that takes a number n as parameter and returns true if n is a prime number and false otherwise.  Use the following function definition:\n  boolean isPrime(int n);",
        "answer": "public class PrimeCheck {\n\n    // Function to check if n is prime\n    static boolean isPrime(int n) {\n        if (n <= 1) return false; // 0,1, negatives are not prime\n        if (n == 2) return true;  // 2 is prime\n        if (n % 2 == 0) return false; // even numbers > 2 are not prime\n\n        // check divisors from 3 up to sqrt(n)\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    // Main to test\n    public static void main(String[] args) {\n        System.out.println(isPrime(2));   // true\n        System.out.println(isPrime(11));  // true\n        System.out.println(isPrime(15));  // false\n        System.out.println(isPrime(1));   // false\n    }\n}\n\n"
    },
    "80": {
        "question": "An abecedarian is a word whose letters appear in alphabetical order. Write a program which will determine whether the given words are abecedarian or not and print 1 if abecedarian, 0 if not.\n\n\n\n\nInput Specification :\n\nFirst line will contain an integer specifying the number of inputs.\n\nThis will be followed by the words separated by a \",\"\n\n\n\n\nOutput Specification :\n\nOutput will be comma seperated string of 0 or 1 suggesting whether a word is Abecedarian or not\n\n\n\n\nSample Input: 3 henry,grape,jklm\n\nSample Output: 0,0,1",
        "answer": "import java.util.*;\n\npublic class AbecedarianCheck {\n    // Function to check if a word is abecedarian\n    static boolean isAbecedarian(String word) {\n        for (int i = 0; i < word.length() - 1; i++) {\n            if (word.charAt(i) > word.charAt(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        int n = sc.nextInt();     // number of words\n        sc.nextLine();            // consume newline\n        String line = sc.nextLine();\n        \n        String[] words = line.split(\",\");\n        List<String> results = new ArrayList<>();\n        \n        for (String word : words) {\n            word = word.trim();   // remove spaces\n            results.add(isAbecedarian(word) ? \"1\" : \"0\");\n        }\n        \n        System.out.println(String.join(\",\", results));\n    }\n}\n"
    },
    "81": {
        "question": "Write a Program in Java to input a number and check whether it is a Keith Number or not.\nNote:A Keith Number is an integer N with 'd' digits with the following property:\nIf a Fibonacci-like sequence (in which each term in the sequence is the sum of the 'd' previous terms) is formed, with the first 'd' terms being the decimal digits of the number N, then N itself occurs as a term in the sequence.\nFor example, 197 is a Keith number since it generates the sequence 1, 9, 7, 17, 33, 57, 107, 197, ???.. and it contains the original number 197\nSample Input: \n197\n Sample Output\n197 is a Keith number\nSample Input: \n12\n Sample Output: \n12 is not a Keith number",
        "answer": "import java.util.*;\n\npublic class KeithNumber {\n    public static boolean isKeith(int n) {\n        // Extract digits\n        String s = Integer.toString(n);\n        int d = s.length();\n        int[] digits = new int[d];\n        \n        for (int i = 0; i < d; i++) {\n            digits[i] = s.charAt(i) - '0';\n        }\n\n        // List to store sequence\n        List<Integer> seq = new ArrayList<>();\n        for (int x : digits) seq.add(x);\n\n        int next = 0;\n        while (next < n) {\n            // sum of last d terms\n            next = 0;\n            for (int i = seq.size() - d; i < seq.size(); i++) {\n                next += seq.get(i);\n            }\n            seq.add(next);\n        }\n\n        return next == n;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n\n        if (isKeith(n)) {\n            System.out.println(n + \" is a Keith number\");\n        } else {\n            System.out.println(n + \" is not a Keith number\");\n        }\n    }\n}\n"
    },
    "82": {
        "question": "David is a student of Computer Science and he need your Java skill to solve the problem of space separeted Fibonacci Numbers upto \"\"N\"\" term. If the N is not greater than 0 then print \"\"Invalid input\"\".\nSample Intput:\n10\nSample Output:\n0 1 1 2 3 5 8 13 21 34\nNOTE:- For accepting input use Scanner class.",
        "answer": "import java.util.*;\n\npublic class FibonacciGenerator {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n\n        if (N <= 0) {\n            System.out.println(\"Invalid input\");\n            return;\n        }\n\n        int a = 0, b = 1;\n\n        for (int i = 1; i <= N; i++) {\n            System.out.print(a);\n            if (i < N) System.out.print(\" \");\n            int next = a + b;\n            a = b;\n            b = next;\n        }\n    }\n}\n"
    },
    "83": {
        "question": "Given a sentence find the unique words in the sentence. For example if the sentence is “He scared the sacred god” then the number of unique words is only 4 as sacred and scared are anagrams of each other and are counted as only one word.\nYour input will be one sentence terminated by either '?' or '!' or '.'.\nInput Specification:\nInput should contain single  line of sentence\nOutput Specification:\nOutput should be the number of unique words in the sentence\nSample Input:\nThe act of the cat an inch close to the chin was tact.\nSample Output:\n9",
        "answer": "import java.util.*;\n\npublic class UniqueWords {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String sentence = sc.nextLine().trim();\n\n        // Remove ending punctuation\n        if (sentence.endsWith(\".\") || sentence.endsWith(\"?\") || sentence.endsWith(\"!\")) {\n            sentence = sentence.substring(0, sentence.length() - 1);\n        }\n\n        String[] words = sentence.toLowerCase().split(\"\\\\s+\");\n        Set<String> unique = new HashSet<>();\n\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            String key = new String(chars);\n            unique.add(key);\n        }\n\n        System.out.println(unique.size());\n    }\n}\n"
    },
    "84": {
        "question": "Professor Moriarty was taking English class and during the session he said “Rome wasn't built in a day” and to that a student got up and replied “but Italians may wonder”. Professor was bemused and asked “do you realize what did? You just said an anagram of my sentence? Let’s try some more!”. Now the professor started the game. So he made a statement and the students replied with another statement. Please help the students figure out if their sentence is an anagram of what the professor said.\n The input to your program has two sentences, each terminated by '?' or '!' or '.'. The sentence may contain other punctuation marks in between.\n Input Specification:\nInput should contain two lines of sentences\nOutput Specification:\nYour program should output if both the sentences are anagram of each other or not.\nHint: Obviously, you do not consider the capitalization\nSample Input - 1:\nRome wasn't built in a day!\nBut laid in two years, man.\nSample Output - 1:\nRome wasn't built in a day! is an anagram of But laid in two years, man.\nSample Input - 2:\nA stitch in time saves nine.\nIs this meant as an Incentive?\nSample Output - 2:\nA stitch in time saves nine. is not an anagram of Is this meant as an Incentive?",
        "answer": "import java.util.*;\n\npublic class SentenceAnagram {\n    // Helper to clean a sentence\n    private static String normalize(String s) {\n        // Remove ending punctuation\n        if (s.endsWith(\".\") || s.endsWith(\"?\") || s.endsWith(\"!\")) {\n            s = s.substring(0, s.length() - 1);\n        }\n        // Remove all non-alphabetic chars and convert to lowercase\n        s = s.replaceAll(\"[^a-zA-Z]\", \"\").toLowerCase();\n        return s;\n    }\n\n    // Helper to check if two strings are anagrams\n    private static boolean areAnagrams(String s1, String s2) {\n        char[] a1 = s1.toCharArray();\n        char[] a2 = s2.toCharArray();\n        Arrays.sort(a1);\n        Arrays.sort(a2);\n        return Arrays.equals(a1, a2);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        String sentence1 = sc.nextLine();\n        String sentence2 = sc.nextLine();\n\n        String normalized1 = normalize(sentence1);\n        String normalized2 = normalize(sentence2);\n\n        if (areAnagrams(normalized1, normalized2)) {\n            System.out.println(sentence1 + \" is an anagram of \" + sentence2);\n        } else {\n            System.out.println(sentence1 + \" is not an anagram of \" + sentence2);\n        }\n    }\n}\n"
    },
    "85": {
        "question": "Bhaskar wanted to increase his typing speed for programming contests. So, his friend Manpreet advised him to type the sentence \"The quick brown fox jumps over the lazy dog\" repeatedly, because it is a pangram. (Pangrams are sentences constructed by using every letter of the alphabet at least once.)\nAfter typing the sentence several times, Bhaskar became bored with it. So he started to look for other pangrams.\nGiven a sentence s, tell Roy if it is a pangram or not.\nInput Specification:\nInput consists of a string.\nConstraints \nLength of string s be at most 103 and it may contain spaces, lower case and upper case letters. Lower-case and upper-case instances of a letter are considered the same.\nOutput Specification:\nOutput a line containing s is a pangram if is a pangram, otherwise, output s is not a pangram. (\nWithout full stop)\nSample Input - 1:\nThe quick brown fox jumps over the lazy dog\nSample Output - 1:\nThe quick brown fox jumps over the lazy dog is a pangram\nSample Input - 2:\nWe promptly judged antique ivory buckles for the prize\nSample Output - 2:\nWe promptly judged antique ivory buckles for the prize is not a pangram",
        "answer": "import java.util.*;\n\npublic class PangramChecker {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String sentence = sc.nextLine();\n\n        String lower = sentence.toLowerCase();\n        boolean[] letters = new boolean[26];\n\n        for (char ch : lower.toCharArray()) {\n            if (ch >= 'a' && ch <= 'z') {\n                letters[ch - 'a'] = true;\n            }\n        }\n\n        boolean isPangram = true;\n        for (boolean present : letters) {\n            if (!present) {\n                isPangram = false;\n                break;\n            }\n        }\n\n        if (isPangram) {\n            System.out.println(sentence + \" is a pangram\");\n        } else {\n            System.out.println(sentence + \" is not a pangram\");\n        }\n    }\n}\n"
    },
    "86": {
        "question": "A saddle point is an element of the matrix such that it is the minimum element for the row to which it belongs and the maximum element for the column to which it belongs. Saddlepoint for a given matrix is always unique. It is also possible that there is no saddle point at all.\nWrite a program in Java to accept a matrix (of size between 3 and 7 both inclusive) of positive integers and print its saddle point. If there is no saddle point print -1\nExample: In the Matrix below\n4 5 6\n7 8 9\n5 1 3\nSaddlepoint is 7 because it is the minimum element of row 2 and maximum element of column 1\nInput specification:\nThe first line contains the no of Rows (m) and No of columns (n). Rest of the lines will contain elements of the Matrix.\nOutput Specification:\nS (the saddle point)\nor\n-1 (if no saddle point)\nSample Input\n3 3\n4 5 6\n7 8 9\n5 1 3\nSample Output\n7",
        "answer": "import java.util.*;\n\npublic class SaddlePoint {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int m = sc.nextInt();\n        int n = sc.nextInt();\n\n        int[][] matrix = new int[m][n];\n\n        // Read matrix\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = sc.nextInt();\n            }\n        }\n\n        int saddlePoint = -1;\n\n        // Check each row\n        for (int i = 0; i < m; i++) {\n            // Find min element in row i\n            int minVal = matrix[i][0];\n            int colIndex = 0;\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][j] < minVal) {\n                    minVal = matrix[i][j];\n                    colIndex = j;\n                }\n            }\n\n            // Check if minVal is the maximum in its column\n            boolean isSaddle = true;\n            for (int k = 0; k < m; k++) {\n                if (matrix[k][colIndex] > minVal) {\n                    isSaddle = false;\n                    break;\n                }\n            }\n\n            if (isSaddle) {\n                saddlePoint = minVal;\n                break; // unique, so stop searching\n            }\n        }\n\n        System.out.println(saddlePoint);\n    }\n}\n"
    },
    "87": {
        "question": "A secret code encrypts a message by putting it in an array of size n (n < 10, taken from the user) and reading down the columns (blanks are replaced by asterisks and full stops are added to fill up the array). Write a program that takes n, column size of an array and an input string and encrypts it as defined above and prints the encrypted string. The first element of the string being the array size(one digit).\nNote: Change in array size will change the encryption. The string \"Lets go to the sandwich shop today\" in column size of array 6 will look like as below(after replacing space with * and excess column in the last row with a full stop):\nL\te\tt\ts\t*\tg\no\t*\tt\to\t*\tt\nh\te\t*\ts\ta\tn\nd\tw\ti\tc\th\t*\ns\th\to\tp\t*\tt\no\td\ta\ty\t.\t.\n Reading down by columns it would be : \"Lohdso\", \"e*ewhd\", \"tt*ioa\", \"soscpy\", \"**ah*.\" and \"gtn*t.\". Combining these together you get the encrypted output \"Lohdsoe*ewhdtt*ioasoscpy**ah*.gtn*t.\"\n \nHint:  String length will determine the number of rows.\nInput specification:\nThe first line contains the array's column size. Second line contains the input string to be encrypted.\nOutput Specification:\nThe encrypted string with the array's column size as the first element \nor\nArray's column size of n is Invalid\nSample Input: \n6\nLets go to the sandwich shop today\nSample Output:\n6Lohdsoe*ewhdtt*ioasoscpy**ah*.gtn*t.",
        "answer": "import java.util.*;\n\npublic class SecretCodeEncryption {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        sc.nextLine(); // consume newline\n        String input = sc.nextLine();\n\n        if (n >= 10 || n <= 0) {\n            System.out.println(\"Array's column size of \" + n + \" is Invalid\");\n            return;\n        }\n\n        // Step 1: Replace spaces with '*'\n        input = input.replace(' ', '*');\n\n        // Step 2: Find number of rows\n        int length = input.length();\n        int rows = (int) Math.ceil((double) length / n);\n\n        // Step 3: Fill matrix row by row\n        char[][] matrix = new char[rows][n];\n        int index = 0;\n\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < n; j++) {\n                if (index < length) {\n                    matrix[i][j] = input.charAt(index++);\n                } else {\n                    matrix[i][j] = '.'; // fill extra with '.'\n                }\n            }\n        }\n\n        // Step 4: Read column by column\n        StringBuilder encrypted = new StringBuilder();\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < rows; i++) {\n                encrypted.append(matrix[i][j]);\n            }\n        }\n\n        // Step 5: Output with n in front\n        System.out.println(n + encrypted.toString());\n    }\n}\n"
    },
    "88": {
        "question": "Write a program to find if the given two strings are anagram are not. An anagram of a string is a string obtained by permuting the letters of a string. For example aaba and aaab are anagrams, while abcd and deba are not. Input The first line would consist of the number of test cases \"T\". This would be followed by \"T\" lines consisting of two space separated strings. The strings would consist of only letters \"a\"-\"z\". Output You have to print \"YES\" if one string is an anagram of the other or \"NO\" otherwise. Sample Testcases\nInput:\n2\naaba aaab\nabcd deba\nOutput:\nYES\nNO",
        "answer": "import java.util.*;\n\npublic class AnagramCheck {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int T = sc.nextInt(); // number of test cases\n        sc.nextLine(); // consume newline\n\n        for (int t = 0; t < T; t++) {\n            String str1 = sc.next();\n            String str2 = sc.next();\n\n            if (areAnagrams(str1, str2)) {\n                System.out.println(\"YES\");\n            } else {\n                System.out.println(\"NO\");\n            }\n        }\n    }\n\n    // Function to check if two strings are anagrams\n    static boolean areAnagrams(String s1, String s2) {\n        if (s1.length() != s2.length()) return false;\n\n        int[] freq = new int[26]; // only lowercase letters a-z\n\n        for (char c : s1.toCharArray()) {\n            freq[c - 'a']++;\n        }\n        for (char c : s2.toCharArray()) {\n            freq[c - 'a']--;\n        }\n\n        for (int f : freq) {\n            if (f != 0) return false;\n        }\n        return true;\n    }\n}\n"
    },
    "89": {
        "question": "Question :  \nWrite the code to print the following pattern.\nSample-output:\n1-2-3-4-5-6-7-8-7-6-5-4-3-2-1\n1-2-3-4-5-6-7---7-6-5-4-3-2-1\n1-2-3-4-5-6-------6-5-4-3-2-1\n1-2-3-4-5-----------5-4-3-2-1\n1-2-3-4---------------4-3-2-1\n1-2-3-------------------3-2-1\n1-2-----------------------2-1\n1---------------------------1\nNOTE: The hypens(-) here denote blank spaces.",
        "answer": "public class PatternPrint {\n    public static void main(String[] args) {\n        int n = 8; // max number\n\n        for (int i = 0; i < n; i++) {\n            // Left side numbers\n            for (int j = 1; j <= n - i; j++) {\n                System.out.print(j);\n                if (!(i == n - 1 && j == n - i)) System.out.print(\"-\");\n            }\n\n            // Middle spaces (2*i - 1 hyphens)\n            for (int j = 0; j < 2 * i - 1; j++) {\n                System.out.print(\"-\");\n            }\n\n            // Right side numbers\n            for (int j = n - i; j >= 1; j--) {\n                System.out.print(j);\n                if (j != 1) System.out.print(\"-\");\n            }\n\n            System.out.println();\n        }\n    }\n}\n"
    },
    "90": {
        "question": "You are creating an application which requires to validate the month\nand day of the month by implementing a class Validation which consist \nof a method boolean validatemmdd(int mm, int dd).\nThis method takes two integer mm and dd and returns true if the both are\nvalid and returns false if either of them or both are invalid. Month(mm)\nshould be between 1 to 12 if not throw exception \"Invalid month\" and\nday(dd) should be <=28,30 or 31 based on the month else throw the exception\n\"Invalid day\".  Year is never a leap year.\nWrite the method boolean validatemmdd(int mm, int dd) in class Validation\nand return appropriate boolean value or exception as defined above",
        "answer": "class Validation {\n    public boolean validatemmdd(int mm, int dd) throws Exception {\n        // Check month validity\n        if (mm < 1 || mm > 12) {\n            throw new Exception(\"Invalid month\");\n        }\n\n        // Days in each month (non-leap year)\n        int[] daysInMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n\n        int maxDays = daysInMonth[mm - 1];\n\n        // Check day validity\n        if (dd < 1 || dd > maxDays) {\n            throw new Exception(\"Invalid day\");\n        }\n\n        return true; // valid\n    }\n\n    // Main method just for testing\n    public static void main(String[] args) {\n        Validation v = new Validation();\n        try {\n            System.out.println(v.validatemmdd(2, 29)); // Invalid day\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n\n        try {\n            System.out.println(v.validatemmdd(13, 10)); // Invalid month\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n\n        try {\n            System.out.println(v.validatemmdd(12, 25)); // true\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"
    },
    "91": {
        "question": "Write a method List extractNumber (String S) that reads a paragraph (one or more sentences) consisting only of text and integers and returns a List that contains only the numbers in the order in which they apper in input. (e.g for extractNumber(\"7 days to go for the next exam. I have 3 more exams\" ) should return a list with [7, 3]",
        "answer": "import java.util.*;\nimport java.util.regex.*;\n\npublic class NumberExtractor {\n\n    public static List<Integer> extractNumber(String s) {\n        List<Integer> numbers = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"\\\\d+\");  // matches sequences of digits\n        Matcher matcher = pattern.matcher(s);\n\n        while (matcher.find()) {\n            numbers.add(Integer.parseInt(matcher.group()));\n        }\n        return numbers;\n    }\n\n    // Test main\n    public static void main(String[] args) {\n        String text = \"7 days to go for the next exam. I have 3 more exams\";\n        List<Integer> result = extractNumber(text);\n        System.out.println(result); // Output: [7, 3]\n    }\n}\n"
    },
    "92": {
        "question": "Write an application that encodes English language phrases into Double Dutch using the following algorithm:\nTo form a Double Dutch sentence from an English sentence, translate each English word into a Double Dutch word, place the first letter of the English word at the end of the word and add the letters \"ay.\" Thus the word \"jump\" becomes \"umpjay,\" the word \"the\" becomes \"hetay,\" and the word \"ignite\" becomes \"gniteiay.\"\nBlanks between words remain as blanks. Assume that the English sentence consists of words separated by blanks, there are no punctuation marks and all words have two or more letters.\nWrite a program to print the Double Dutch Word that takes as input a word and prints the Double Dutch equivalent. Assume all letters are lowercase.\n Input Specification: \nA line containing text to be converted.\nOutput Specification:\nThe double dutch text line.\nSample input : \nthis is ignite\nSample Output : \nhistay siay gniteiay",
        "answer": "import java.util.Scanner;\n\npublic class DoubleDutch {\n\n    public static String toDoubleDutch(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            // take substring from 1st character onwards, then add the first char + \"ay\"\n            String doubleDutchWord = word.substring(1) + word.charAt(0) + \"ay\";\n            result.append(doubleDutchWord);\n\n            if (i < words.length - 1) {\n                result.append(\" \"); // keep spaces\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();  // read input line\n        System.out.println(toDoubleDutch(input));\n        sc.close();\n    }\n}\n"
    },
    "93": {
        "question": "A number is said to be prime if it has only two factors 1 and itself. A Circular Prime is a prime number that remains prime under cyclic shifts of its digits. When the leftmost digit is removed and replaced at the end of the remaining string of digits, the generated number is still prime. The process is repeated until the original number is reached again.\nExample:\n131 is prime\n311 is also prime\n113 is also prime\nHence, 131 is a circular prime.\nSAMPLE INPUT : 131\nSAMPLE OUTPUT: 131 is a circular prime\nSAMPLE INPUT : 29\nSAMPLE OUTPUT: 29 is not a circular prime",
        "answer": "import java.util.Scanner;\n\npublic class CircularPrime {\n\n    // Check if a number is prime\n    public static boolean isPrime(int n) {\n        if (n < 2) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    // Generate rotations and check if all are prime\n    public static boolean isCircularPrime(int n) {\n        String numStr = String.valueOf(n);\n        int len = numStr.length();\n\n        String rotated = numStr;\n        for (int i = 0; i < len; i++) {\n            int rotatedNum = Integer.parseInt(rotated);\n            if (!isPrime(rotatedNum)) {\n                return false;\n            }\n            // rotate left: move first char to end\n            rotated = rotated.substring(1) + rotated.charAt(0);\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int num = sc.nextInt();\n\n        if (isCircularPrime(num)) {\n            System.out.println(num + \" is a circular prime\");\n        } else {\n            System.out.println(num + \" is not a circular prime\");\n        }\n\n        sc.close();\n    }\n}\n"
    },
    "94": {
        "question": "Write a program to print the given number in words.\nAssumptions:\nYou can assume that input will be >= 0 and < 50000. Also all numbers will be valid i.e. input will not have numbers like 023.\nInput Format:\nInput will have numbers separated by newline. Program should stop reading input when it encounters a 0.\nOutput Format\nOutput contains word form all given numbers separated by newline.\nSample Input:\n123\n34108\n0\nSample Output:\none hundred twenty three\nthirty four thousand one hundred eight",
        "answer": "import java.util.*;\n\npublic class NumberToWords {\n\n    // Arrays for word mapping\n    private static final String[] belowTwenty = {\n        \"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\",\n        \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\",\n        \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"\n    };\n\n    private static final String[] tens = {\n        \"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\",\n        \"sixty\", \"seventy\", \"eighty\", \"ninety\"\n    };\n\n    // Convert number to words (recursive)\n    private static String convert(int num) {\n        if (num == 0) return \"zero\";\n        if (num < 20) return belowTwenty[num];\n        if (num < 100) \n            return tens[num / 10] + (num % 10 != 0 ? \" \" + belowTwenty[num % 10] : \"\");\n        if (num < 1000) \n            return belowTwenty[num / 100] + \" hundred\" + (num % 100 != 0 ? \" \" + convert(num % 100) : \"\");\n        if (num < 100000) {\n            return convert(num / 1000) + \" thousand\" + (num % 1000 != 0 ? \" \" + convert(num % 1000) : \"\");\n        }\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        while (true) {\n            int num = sc.nextInt();\n            if (num == 0) break; // stop reading input when 0\n            System.out.println(convert(num));\n        }\n\n        sc.close();\n    }\n}\n"
    },
    "95": {
        "question": "If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.\nIf all the numbers from x1 to x2 (1= x1 <=x2<=1000) inclusive were written out in words, how many letters would be used? Write a program to find the count of letters given X1 and X2.\nNOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of \"and\" when writing out numbers is in compliance with British usage.\nInput\nTwo integers X1 and X2   1<= x1 <=x2<=1000\nOutput\nA single digit number that will be the total number of letters when all numbers between X1 and X2 were written out in words\nExample:\nInput\n1 5\nOutput:\n19\nExplanation:\none, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.",
        "answer": "import java.util.*;\n\npublic class NumberLetterCount {\n\n    private static final String[] belowTwenty = {\n        \"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\",\n        \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n        \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"\n    };\n\n    private static final String[] tens = {\n        \"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\",\n        \"seventy\", \"eighty\", \"ninety\"\n    };\n\n    // Convert number to words (British style, with \"and\")\n    private static String convert(int num) {\n        if (num == 0) return \"\";\n        if (num < 20) return belowTwenty[num];\n        if (num < 100) \n            return tens[num / 10] + (num % 10 != 0 ? belowTwenty[num % 10] : \"\");\n        if (num < 1000) {\n            return belowTwenty[num / 100] + \"hundred\" + \n                   (num % 100 != 0 ? \"and\" + convert(num % 100) : \"\");\n        }\n        if (num == 1000) return \"onethousand\";\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int x1 = sc.nextInt();\n        int x2 = sc.nextInt();\n        sc.close();\n\n        int totalLetters = 0;\n        for (int i = x1; i <= x2; i++) {\n            String word = convert(i);\n            totalLetters += word.length(); // no spaces/hyphens needed (already avoided)\n        }\n\n        System.out.println(totalLetters);\n    }\n}\n"
    },
    "96": {
        "question": "A secret code encrypts a message by putting it in an array's column size n (n < 10, taken from user) and reading down the columns\n(blanks are replaced by asterisks and full stops are added to fill up the array).\nWrite a program that takes an encrypted string (encrypted as above with array's column size as the first character) as input decrypt\nit and prints the original string. Note decrypting means reading by rows.\nNote: Change in array size will change the encryption. So, Array size is given in the first character. If the input given is “6Lohdsoe*ewhdtt*ioasoscpy**ah*.gtn*t.” Then 6 is the array size. Putting it in an array of 6 will look like this;\nL\te\tt\ts\t*\tg\no\t*\tt\to\t*\tt\nh\te\t*\ts\ta\tn\nd\tw\ti\tc\th\t*\ns\th\to\tp\t*\tt\no\td\ta\ty\t.\t.\nReading it row-wise (for decryption) be “Lets*g”, “o*to*t”, “he*san”, “dwich*”, “shop*t” and “oday..”.\nCombining these and replacing * with space removing residual ‘.’ You get the decrypted output “Lets go to the sandwich shop today”\nInput specification:\nThe encrypted string with the array size as the first element\nOutput Specification:\nThe original unencrypted string.\nSample Input:\n6Lohdsoe*ewhdtt*ioasoscpy**ah*.gtn*t.\nSample Output :\nLets go to the sandwich shop today",
        "answer": "import java.util.*;\n\npublic class DecryptMessage {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String encrypted = sc.nextLine();\n        sc.close();\n\n        // First char = number of columns\n        int n = Character.getNumericValue(encrypted.charAt(0));\n        String cipher = encrypted.substring(1);\n\n        int length = cipher.length();\n        int rows = (int) Math.ceil((double) length / n);\n\n        // Fill column-wise\n        char[][] grid = new char[rows][n];\n        int index = 0;\n        for (int col = 0; col < n; col++) {\n            for (int row = 0; row < rows; row++) {\n                if (index < length) {\n                    grid[row][col] = cipher.charAt(index++);\n                }\n            }\n        }\n\n        // Read row-wise\n        StringBuilder decrypted = new StringBuilder();\n        for (int row = 0; row < rows; row++) {\n            for (int col = 0; col < n; col++) {\n                decrypted.append(grid[row][col]);\n            }\n        }\n\n        // Replace * with space, remove trailing dots\n        String result = decrypted.toString().replace('*', ' ').replaceAll(\"\\\\.+$\", \"\");\n\n        System.out.println(result);\n    }\n}\n"
    },
    "97": {
        "question": "Write a program that allows a user to play poker. The program takes as input 7 cards and outputs which of the following poker hands are present (arranged in ascending order of priority):\nTwo Pair: Two cards have the same number\nThree of a kind:Three cards have the same number\nStraight: 5 cards have numbers in a sequence\nFlush: 5 cards have the same suite\nFour of a kind: Four cards have the same number\nIn case more than one hand is present, print the one with the highest priority.\nHint:\nAssume input of each card is as follows:\nFirst character denotes the card\"s rank: a/1 (for ace), k(king), q(queen),j(jack), 2-10(0 will represent 10)\nSecond character denotes the card\"s suite: s(spade),c(club),d(diamond),h(heart)\nIf invalid inputs are present, print \"Invalid input\"\nInput Specification:\nEnter seven cards with ranks and suite\nOutput Specification:\nOutput according to the give above conditions\nSample Input:\n7s\nkd\n7h\n4d\n6c\nqh\n7c\nSample output:\nThree of a kind\nFor your Practice: Server Test Case\nTest Case 1 Input:\n7s\nkd\n7h\n4d\n6c\nqh\n7c\nOutput:\nThree of a kind\nTest Case 2: Input:\n7h\n4d\n6s\nqs\nkh\n5c\n8h\nOutput:\nStraight\nTest Case 3: Input:\n2s\nkd\n2h\nas\n2d\n6h\n2c\nOutput:\nFour of a kind",
        "answer": "import java.util.*;\n\npublic class PokerHand {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        List<String> cards = new ArrayList<>();\n\n        for (int i = 0; i < 7; i++) {\n            if (!sc.hasNext()) {\n                System.out.println(\"Invalid input\");\n                return;\n            }\n            cards.add(sc.next().toLowerCase());\n        }\n        sc.close();\n\n        // Valid ranks and suits\n        Set<String> validRanks = new HashSet<>(Arrays.asList(\n            \"a\",\"k\",\"q\",\"j\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"\n        ));\n        Set<Character> validSuits = new HashSet<>(Arrays.asList('s','c','d','h'));\n\n        Map<Integer,Integer> rankCount = new HashMap<>();\n        Map<Character,Integer> suitCount = new HashMap<>();\n        List<Integer> ranks = new ArrayList<>();\n\n        // Helper to convert rank → int\n        Map<String,Integer> rankMap = new HashMap<>();\n        rankMap.put(\"a\",1); rankMap.put(\"j\",11); rankMap.put(\"q\",12);\n        rankMap.put(\"k\",13); rankMap.put(\"0\",10);\n        for (int i=2; i<=9; i++) rankMap.put(Integer.toString(i), i);\n        rankMap.put(\"1\",1); // allow \"1\" for Ace also\n\n        // Validate and parse\n        for (String card : cards) {\n            if (card.length() < 2) {\n                System.out.println(\"Invalid input\");\n                return;\n            }\n            String rank = card.substring(0, card.length()-1);\n            char suit = card.charAt(card.length()-1);\n\n            if (!validRanks.contains(rank) || !validSuits.contains(suit)) {\n                System.out.println(\"Invalid input\");\n                return;\n            }\n            int value = rankMap.get(rank);\n            ranks.add(value);\n            rankCount.put(value, rankCount.getOrDefault(value,0)+1);\n            suitCount.put(suit, suitCount.getOrDefault(suit,0)+1);\n        }\n\n        // Check Four of a kind\n        for (int count : rankCount.values()) {\n            if (count >= 4) {\n                System.out.println(\"Four of a kind\");\n                return;\n            }\n        }\n\n        // Check Flush\n        for (int count : suitCount.values()) {\n            if (count >= 5) {\n                System.out.println(\"Flush\");\n                return;\n            }\n        }\n\n        // Check Straight\n        Set<Integer> uniq = new HashSet<>(ranks);\n        List<Integer> sorted = new ArrayList<>(uniq);\n        Collections.sort(sorted);\n        int consec = 1, maxConsec = 1;\n        for (int i = 1; i < sorted.size(); i++) {\n            if (sorted.get(i) == sorted.get(i-1)+1) {\n                consec++;\n                maxConsec = Math.max(maxConsec, consec);\n            } else {\n                consec = 1;\n            }\n        }\n        if (maxConsec >= 5) {\n            System.out.println(\"Straight\");\n            return;\n        }\n\n        // Check Three of a kind\n        for (int count : rankCount.values()) {\n            if (count >= 3) {\n                System.out.println(\"Three of a kind\");\n                return;\n            }\n        }\n\n        // Check Two Pair\n        int pairs = 0;\n        for (int count : rankCount.values()) {\n            if (count >= 2) pairs++;\n        }\n        if (pairs >= 2) {\n            System.out.println(\"Two Pair\");\n            return;\n        }\n\n        // If nothing matched\n        System.out.println(\"Invalid input\");\n    }\n}\n"
    },
    "98": {
        "question": "Design the program that takes a mxn matrix as input and shift the matrix P rows upwards in a cyclic manner and print the new matrix.\nm, n and P are given by user. The values of m and n are between 3 and 6 and P is less than m.\nInput specification:\nThe first line contains m,n and P followed by mxn matrix values row-wise\nOutput Specification:\nThe new shifted matrix\nExample: In the Matrix below\n3 3 2\n4 5 6\n7 8 9\n5 1 3\nhere m=3, n=3 and P=2\nSince P is 2 then (3rd row moves to 1st and 1st row to 2nd and 2nd row to 3rd) the resultant matrix is\n5 1 3\n4 5 6\n7 8 9",
        "answer": "import java.util.*;\n\npublic class CyclicShiftMatrix {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        // Read m, n, P\n        int m = sc.nextInt();\n        int n = sc.nextInt();\n        int P = sc.nextInt();\n        \n        // Check constraints\n        if (m < 3 || m > 6 || n < 3 || n > 6 || P >= m) {\n            System.out.println(\"Invalid input\");\n            return;\n        }\n        \n        int[][] matrix = new int[m][n];\n        \n        // Read matrix\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = sc.nextInt();\n            }\n        }\n        \n        // Create shifted matrix\n        int[][] shifted = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            shifted[i] = matrix[(i + P) % m];\n        }\n        \n        // Print shifted matrix\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                System.out.print(shifted[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n\n"
    },
    "99": {
        "question": "Write a program to accept two 3X3 matrices and find their product. Also check whether the resultant matrix is a Sparse Matrix.\nA matrix is known to be a Sparse Matrix if most of the elements of the matrix are 0 (i.e. the number of non zero elements is less than the number of zeros).\nE.g. 0 2 4 1 0 0 0 5 0 Is a Sparse Matrix.\nInput Specification: \nInput should consist of two 3X3 matrices.\nInput should be in the same way as shown.\nEach element should be in different lines and the input should be row wise (i.e. insert the 1st row elements and then the 2nd row elements and then the 3rd row elements).\nOutput Specification:\nIf the resultant matrix (product of the two matrices) is a Sparse matrix also print the number of zeros present,  then the output should be\n\"Sparse Matrix\nNumber of zeroes - (count)\".\nOtherwise the output should be\n\"Not a Sparse Matrix\nNumber of non-zero elements - (count)\".\nSample Input:\n1\n0\n1\n0\n0\n3\n2\n0\n2\n0\n-1\n0\n5\n0\n2\n0\n1\n1\nSample Output:\nSparse Matrix\nNumber of zeroes - 5",
        "answer": "import java.util.*;\n\npublic class MatrixProductSparse {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int[][] A = new int[3][3];\n        int[][] B = new int[3][3];\n        int[][] C = new int[3][3];\n\n        // Read matrix A\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                A[i][j] = sc.nextInt();\n            }\n        }\n\n        // Read matrix B\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                B[i][j] = sc.nextInt();\n            }\n        }\n\n        // Matrix multiplication\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                for (int k = 0; k < 3; k++) {\n                    C[i][j] += A[i][k] * B[k][j];\n                }\n            }\n        }\n\n        // Count zeros and non-zeros\n        int zeroCount = 0, nonZeroCount = 0;\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                if (C[i][j] == 0) {\n                    zeroCount++;\n                } else {\n                    nonZeroCount++;\n                }\n            }\n        }\n\n        // Print result\n        if (zeroCount > nonZeroCount) {\n            System.out.println(\"Sparse Matrix\");\n            System.out.println(\"Number of zeroes - \" + zeroCount);\n        } else {\n            System.out.println(\"Not a Sparse Matrix\");\n            System.out.println(\"Number of non-zero elements - \" + nonZeroCount);\n        }\n    }\n}\n"
    },
    "100": {
        "question": "The matrix game was played by children. The game was that you had to find the sum of each element of a row and put it at last of the row.\nSimilarly you find the sum of each column and put it at the bottom of corresponding column. The bottom right element will contain the average of row sum\nand column sum for its corresponding row and column elements.\nInput specification :\n1st line of input will contain noOfRows. 2nd input will contain noOfColumns. Rest (noOfRows * noOfColumns) lines will contain elements for the Matrix.\nOutput specification :\nYour output will contain a matrix having sum of all elements of the row at the last index of each row and sum of column elements at last index of column.\nLast index of row and column(ie: bottom right element) will contain the average of row sum and column sum for its corresponding row and column elements.\nSample Input :\n3 2\n2 3\n4 1\n6 8\nSample Output :\n2 3 5\n4 1 5\n6 8 14\n12 12 24\nOutput Description :\nFor row sum 3+2=5 4+1=5 6+8=14 For column sum 2+4+6=12 3+1+8=12 For bottom right value rowsum=12+12=24 columnSum=5+5+14=24 average is (24+24)/2=24",
        "answer": "import java.util.*;\n\npublic class MatrixGame {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int m = sc.nextInt(); // number of rows\n        int n = sc.nextInt(); // number of columns\n\n        int[][] matrix = new int[m][n];\n\n        // Read matrix\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = sc.nextInt();\n            }\n        }\n\n        // New matrix with extra row and column\n        int[][] result = new int[m + 1][n + 1];\n\n        // Copy original values\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                result[i][j] = matrix[i][j];\n            }\n        }\n\n        // Row sums\n        for (int i = 0; i < m; i++) {\n            int rowSum = 0;\n            for (int j = 0; j < n; j++) {\n                rowSum += matrix[i][j];\n            }\n            result[i][n] = rowSum; // last column\n        }\n\n        // Column sums\n        for (int j = 0; j < n; j++) {\n            int colSum = 0;\n            for (int i = 0; i < m; i++) {\n                colSum += matrix[i][j];\n            }\n            result[m][j] = colSum; // last row\n        }\n\n        // Bottom-right element\n        int totalRowSum = 0, totalColSum = 0;\n        for (int i = 0; i < m; i++) totalRowSum += result[i][n];\n        for (int j = 0; j < n; j++) totalColSum += result[m][j];\n\n        result[m][n] = (totalRowSum + totalColSum) / 2;\n\n        // Print result\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                System.out.print(result[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n"
    },
    "101": {
        "question": "You are asked to find the value of the largest triple sum in a positive integer array. A triple is a group of three consecutive elements and a triple sum is the sum of those three consecutive elements. For example, the array A = [1,3,2,4,2,1] has triples (1,3,2), (3,2,4), (2,4,2), and (4,2,1) and the sum of triplets are 6,9,8,and 7 respectively. The largest triple sum is 9 for triple (3,2,4). Write a Java program to print the elements of that largest triple.  \nInput Specification:\nThe first line of the input consists of an integer n (where n>=3) denotes the size of the array. In next line there will be n integers separated by space correspond to the n elements in the array.\nOutput Specification:\nIf value of n is invalid, print 'Invalid Input'.\nElse print the largest triple sum in first line and in second line prints the elements of that largest triple separated by space.\nSample Input :\n6\n1 3 2 4 2 1\nSample Output :\n9\n3 2 4\nExplanation:\nThe given array is [1,3,2,4,2,1] has triples (1,3,2), (3,2,4), (2,4,2), and (4,2,1) and the sum of triplets are 6,9,8,and 7 respectively. The largest triple sum is 9 and its corresponding largest triple is (3,2,4)",
        "answer": "import java.util.*;\n\npublic class LargestTripleSum {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();   // size of array\n\n        if (n < 3) {\n            System.out.println(\"Invalid Input\");\n            return;\n        }\n\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        int maxSum = 0;\n        int index = 0;\n\n        // compute first triple sum\n        maxSum = arr[0] + arr[1] + arr[2];\n        index = 0;\n\n        // sliding window for remaining triples\n        for (int i = 1; i <= n - 3; i++) {\n            int sum = arr[i] + arr[i + 1] + arr[i + 2];\n            if (sum > maxSum) {\n                maxSum = sum;\n                index = i;\n            }\n        }\n\n        // print results\n        System.out.println(maxSum);\n        System.out.println(arr[index] + \" \" + arr[index + 1] + \" \" + arr[index + 2]);\n    }\n}\n"
    },
    "102": {
        "question": "Problem Statement:\nYou have given an array of positive integers. Write a program to split the array into two arrays (say A and B) such that the sum of all the numbers in array A is equal to the sum of all numbers in array B. If it possible to split the given array in such a way then print the sum of any splited array. If the split is not possible print -1.\nInput Specification:\n-------------------\nThe input consists of three  parts the first part is the number of test cases t.\nEach test case has two input parts:\nThe first contains a integer n that species the number of integers in  the array given as input.\nThe next line consists of n integers as input.\nOutput Specification:\n---------------------\nThe output consists of t integers each in each line. The ith interger is the output for ith testcase.\nSample Input:\n-------------\n2\n5\n4 1 6 2 1\n3\n2 6 2\nSample  Output:\n---------------\n7\n-1\nN.B: The size of both splited array may not be same. But sum of numbers of both splited array should be same.\n----\nExplanation:\n------------\nHere two(t=2) test cases are there.\nFirst case:\nn = 5\narray is [4, 1, 6, 2, 1]\nNow, we can split this array into two parts as A = [1,2,4] and B = [1,6] and sum of all numbers in A = 1 + 2 + 4 = 7 and sum of all numbers in B =  1 + 6 =7.\nHence, the given array can be splited into two halves such that sum of numbers of both splited array is same. So, you have to print the sum of numbers of any splited half which is 7.\nSecond Case:\nn = 3\narray is [2, 6, 2]\nNow, we anyway can split this array into two halves such that sum of numbers of both splited array would be same.\nHence, the given array CAN NOT be splited into two halves. So, you have to print -1.\nSo, Total output becomes:\n7\n-1",
        "answer": "import java.util.*;\n\npublic class SplitArrayEqualSum {\n    \n    // Function to check if subset with target sum exists\n    static boolean canPartition(int[] arr, int n, int target) {\n        boolean[][] dp = new boolean[n + 1][target + 1];\n\n        // base case: sum 0 is always possible\n        for (int i = 0; i <= n; i++) {\n            dp[i][0] = true;\n        }\n\n        // fill dp table\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= target; j++) {\n                if (arr[i - 1] <= j) {\n                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]];\n                } else {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n        return dp[n][target];\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();  // number of test cases\n\n        while (t-- > 0) {\n            int n = sc.nextInt();\n            int[] arr = new int[n];\n            int sum = 0;\n\n            for (int i = 0; i < n; i++) {\n                arr[i] = sc.nextInt();\n                sum += arr[i];\n            }\n\n            // if total sum is odd → cannot split\n            if (sum % 2 != 0) {\n                System.out.println(-1);\n                continue;\n            }\n\n            int target = sum / 2;\n\n            if (canPartition(arr, n, target)) {\n                System.out.println(target);\n            } else {\n                System.out.println(-1);\n            }\n        }\n\n        sc.close();\n    }\n}\n"
    },
    "103": {
        "question": "There is a function called range in python that is used to generate a sequence of numbers, given a starting number, limiting number and a step. Implement such a function for generating time as hour, minute and second. The input to your program consists of three lines. Each of the first two lines gives the time as three integers specifying hours, minutes and seconds.\n\nFirst line is the starting time and second is the step.\n\nThird line has a single integer n and your program should produce the nth term in the time sequence.\n\nSample input:\n\n12 15 30\n\n8 25 40\n\n2\n\nExpected output:\n\n05 06 50\n\nExplanation:\n\nThe third line tells us that we need add the time in second line twice to the first line.\n\nTwice of the second line is 16 50 80 but since 80 seconds is equal to 1 minute 20 sec therefore 1 will get carried to minutes part.\n\nSo the time becomes 16 51 20. Now we need to add this to the first line and it becomes 28 66 50. Here again 66 minutes can be written as 1 hour 6 minutes so 1 will get carried and the answer becomes 29 06 50. Hours greater than 24 should not be present so we should subtract 24 from the hours part and it becomes 05 06 50 (Hour value greater than 24 should have 24 subtracted from it)\n\nHint:\n\nUse String.format(“%02d”, result) to return result as a string with leading zero, if its value is less than 10.",
        "answer": "import java.util.*;\n\npublic class TimeRange {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Read starting time\n        int h1 = sc.nextInt();\n        int m1 = sc.nextInt();\n        int s1 = sc.nextInt();\n\n        // Read step time\n        int hStep = sc.nextInt();\n        int mStep = sc.nextInt();\n        int sStep = sc.nextInt();\n\n        // Read n\n        int n = sc.nextInt();\n\n        // Multiply step by n\n        int totalH = hStep * n;\n        int totalM = mStep * n;\n        int totalS = sStep * n;\n\n        // Normalize seconds -> minutes\n        totalM += totalS / 60;\n        totalS = totalS % 60;\n\n        // Normalize minutes -> hours\n        totalH += totalM / 60;\n        totalM = totalM % 60;\n\n        // Now add step*n to starting time\n        int resH = h1 + totalH;\n        int resM = m1 + totalM;\n        int resS = s1 + totalS;\n\n        // Normalize result\n        resM += resS / 60;\n        resS = resS % 60;\n\n        resH += resM / 60;\n        resM = resM % 60;\n\n        resH = resH % 24; // wrap around 24-hour format\n\n        // Print in HH MM SS with leading zeros\n        System.out.printf(\"%02d %02d %02d%n\", resH, resM, resS);\n\n        sc.close();\n    }\n}\n"
    },
    "104": {
        "question": "Write a java program that accepts an array of integers print out the length of the longest sorted (non-decreasing) sequence of integers in the array along with their values. For example, if the input array is {3, 8, 10, 1, 9, 14, -3, 0, 14, 207, 56, 98, 12}; then the program should print 4 because the longest sorted sequence in the array has four values in it followed by the sequence -3, 0, 14, 207. Notice that sorted means non-decreasing, which means that the sequence could contain duplicates. For example, if the array stores the following values: {17, 42, 3, 5, 5, 5, 8, 2, 4, 6, 1, 19}, then the program should print 5 as the length of the longest sequence followed by the sequence 3, 5, 5, 5, 8. Validate that the array size does not exceed 20. Input Specifications. The first line contains the array size and 2nd line onwards will contain the array values(one value in each line) Output Specification : length of the longest sequence followed by the sequence or Array size of n is Invalid.\n\nSample Input:\n\n13\n\n3 8 10 1 9 14 -3 0 14 207 56 98 12\n\n\n\n\nSample output:\n\n4\n\n-3\n\n0\n\n14\n\n207\n\n\n\n\nSample Input 2:\n\n23\n\n1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5\n\n\n\n\nSample Output 2:\n\nArray size of 23 is Invalid",
        "answer": "import java.util.*;\n\npublic class LongestSortedSequence {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n\n        // validate array size\n        if (n > 20 || n <= 0) {\n            System.out.println(\"Array size of \" + n + \" is Invalid\");\n            return;\n        }\n\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        int maxLen = 1;\n        int maxStart = 0;\n        int currLen = 1;\n        int currStart = 0;\n\n        for (int i = 1; i < n; i++) {\n            if (arr[i] >= arr[i - 1]) {\n                currLen++;\n            } else {\n                if (currLen > maxLen) {\n                    maxLen = currLen;\n                    maxStart = currStart;\n                }\n                currLen = 1;\n                currStart = i;\n            }\n        }\n\n        // final check in case longest sequence ends at last element\n        if (currLen > maxLen) {\n            maxLen = currLen;\n            maxStart = currStart;\n        }\n\n        // print result\n        System.out.println(maxLen);\n        for (int i = maxStart; i < maxStart + maxLen; i++) {\n            System.out.println(arr[i]);\n        }\n\n        sc.close();\n    }\n}\n"
    },
    "105": {
        "question": "Using recursion, check if the given string is a palindrome.\n Use the following function definition (signature): \nboolean isPalindrome(String s);",
        "answer": "public class PalindromeCheck {\n    \n    // Recursive function to check if string is palindrome\n    public static boolean isPalindrome(String s) {\n        // base cases\n        if (s.length() <= 1) {\n            return true;  // single char or empty string is palindrome\n        }\n        \n        // check first and last character\n        if (s.charAt(0) != s.charAt(s.length() - 1)) {\n            return false;\n        }\n        \n        // recursive call on substring (excluding first and last characters)\n        return isPalindrome(s.substring(1, s.length() - 1));\n    }\n\n    public static void main(String[] args) {\n        String str1 = \"madam\";\n        String str2 = \"hello\";\n\n        System.out.println(str1 + \" -> \" + isPalindrome(str1)); // true\n        System.out.println(str2 + \" -> \" + isPalindrome(str2)); // false\n    }\n}\n"
    },
    "106": {
        "question": "Given the time in numerals we may convert it into words, as shown below:\n05:00 = five o' clock\n05:15 = quarter past five\n05:01 = one minute past five\n05:10 = ten minutes past five\n05:30 = half past five\n05:40 = twenty minutes to six\n05:45 = quarter to six\n05:47 = thirteen minutes to six\n05:28 =  twenty eight minutes past five\n12:48 = twelve minutes to one\nWrite a program which prints the time in words for the input given in the format mentioned above.\nConstraints :\n1<=H<=12\n0<=M<60\nSample Input :\n2\n05:00\n05:01\nSample Output:\nfive o' clock\none minute past five",
        "answer": "import java.util.*;\n\npublic class TimeInWords {\n    \n    // mapping of numbers to words\n    static String[] words = {\n        \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n        \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\",\n        \"twenty\", \"twenty one\", \"twenty two\", \"twenty three\", \"twenty four\", \"twenty five\",\n        \"twenty six\", \"twenty seven\", \"twenty eight\", \"twenty nine\"\n    };\n\n    public static String convert(int h, int m) {\n        if (m == 0) {\n            return words[h] + \" o' clock\";\n        } else if (m == 15) {\n            return \"quarter past \" + words[h];\n        } else if (m == 30) {\n            return \"half past \" + words[h];\n        } else if (m == 45) {\n            return \"quarter to \" + words[(h % 12) + 1];\n        } else if (m < 30) {\n            return words[m] + (m == 1 ? \" minute past \" : \" minutes past \") + words[h];\n        } else {\n            int remaining = 60 - m;\n            return words[remaining] + (remaining == 1 ? \" minute to \" : \" minutes to \") + words[(h % 12) + 1];\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        int t = sc.nextInt(); // number of test cases\n        sc.nextLine(); // consume newline\n        \n        for (int i = 0; i < t; i++) {\n            String time = sc.nextLine();\n            String[] parts = time.split(\":\");\n            int h = Integer.parseInt(parts[0]);\n            int m = Integer.parseInt(parts[1]);\n            \n            System.out.println(convert(h, m));\n        }\n        \n        sc.close();\n    }\n}\n"
    },
    "107": {
        "question": "Given a decimal integer n and a base b, write a function that returns n in base b. Note:  for values 10 and above use \"A\" to \"F\". use the following function definition (valid base values 2-16):\n String dec2Base (int num, int base).  Example of the function call with different bases and it output is given below:\n  \n    dec2Base(17,2) =>  10001      dec2Base(17,8)  =>  21\n    dec2Base(26,16)  =>  1A",
        "answer": "public class DecimalToBase {\n\n    public static String dec2Base(int num, int base) {\n        if (base < 2 || base > 16) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 16\");\n        }\n\n        if (num == 0) return \"0\";   // special case\n\n        String digits = \"0123456789ABCDEF\";\n        StringBuilder result = new StringBuilder();\n\n        int n = num;\n        while (n > 0) {\n            int remainder = n % base;\n            result.append(digits.charAt(remainder));\n            n /= base;\n        }\n\n        return result.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        // Examples\n        System.out.println(dec2Base(17, 2));   // 10001\n        System.out.println(dec2Base(17, 8));   // 21\n        System.out.println(dec2Base(26, 16));  // 1A\n        System.out.println(dec2Base(255, 16)); // FF\n        System.out.println(dec2Base(31, 2));   // 11111\n    }\n}\n"
    },
    "108": {
        "question": "Given a decimal integer n and a base b, write a function that returns n in base b. Note:  for values 10 and above use \"A\" to \"F\". use the following function definition (valid base values 2-16):\n String dec2Base (int num, int base).  Example of the function call with different bases and it output is given below:\n  \n    dec2Base(17,2) =>  10001      dec2Base(17,8)  =>  21\n    dec2Base(26,16)  =>  1A",
        "answer": "public class BaseConverter {\n\n    // Function to convert decimal to given base (2–16)\n    public static String dec2Base(int num, int base) {\n        if (base < 2 || base > 16) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 16\");\n        }\n\n        // Handle zero\n        if (num == 0) return \"0\";\n\n        // Handle negative numbers\n        boolean isNegative = num < 0;\n        int n = Math.abs(num);\n\n        String digits = \"0123456789ABCDEF\";\n        StringBuilder result = new StringBuilder();\n\n        while (n > 0) {\n            int remainder = n % base;\n            result.append(digits.charAt(remainder));\n            n /= base;\n        }\n\n        if (isNegative) {\n            result.append(\"-\");\n        }\n\n        return result.reverse().toString();\n    }\n\n    // Test the function\n    public static void main(String[] args) {\n        System.out.println(dec2Base(17, 2));   // 10001\n        System.out.println(dec2Base(17, 8));   // 21\n        System.out.println(dec2Base(26, 16));  // 1A\n        System.out.println(dec2Base(255, 16)); // FF\n        System.out.println(dec2Base(-31, 2));  // -11111\n    }\n}\n"
    },
    "109": {
        "question": "D.K. likes interesting numbers like 64. It turns out that 64 is both a square and a cube, since 64 = 8^2 and 64 = 4^3 . D.K. calls these numbers cool. Write a program that helps D.K. figure out how many integers in a given range are cool. Input Specification : On the first line of input, you are given an integer a such that a = 1 and a <= 10^8 . On the second line of input, you are given an integer b such that a = b and b <= 10^8 . Output Specification : The output should be the number of cool numbers in the range a to b (inclusively: that is, a and b would count as cool numbers in the range if they were actually cool).\nSample Input: 1 100\nSample Output: 2\nSample Input: 100 1000\nSample Output: 1",
        "answer": "import java.util.Scanner;\n\npublic class CoolNumbers {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        long a = sc.nextLong();\n        long b = sc.nextLong();\n        \n        // smallest integer whose 6th power >= a\n        long start = (long) Math.ceil(Math.pow(a, 1.0/6));\n        // largest integer whose 6th power <= b\n        long end   = (long) Math.floor(Math.pow(b, 1.0/6));\n        \n        int count = 0;\n        for (long i = start; i <= end; i++) {\n            long val = i * i * i * i * i * i; // i^6\n            if (val >= a && val <= b) {\n                count++;\n            }\n        }\n        \n        System.out.println(count);\n    }\n}\n"
    },
    "110": {
        "question": "Sahil is expert in java whereas Haider is learning java, during his training he wrote a Java program to convert a sentence into title case where first letter of each word must be capital, while submitting the program Sahil found an exception for abbreviation words, that is a word which is shortened form of any other word should not be converted into title case.\nNow Haider is thinking how to solve this problem, help Haider to convert the whole sentence into title case but abbreviations which are in capital case like INC, IPL, ICC should remain the same.\nInput Specification\nOne line sentence that should be converted into title case.\nOutput Specification\nSame line in title case without converting abbreviations into title case.\nConstraint\nComplete sentence should not be in UPPERCASE\nSample Input 1\nhello welcome to TCS ignite\nSample Output 1\nHello Welcome To TCS Ignite\nSample Input 2\nsonarQube is devOps tool\nSample Output 2\nSonarQube Is DevOps Tool",
        "answer": "import java.util.Scanner;\n\npublic class TitleCaseWithAbbrev {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String sentence = sc.nextLine();\n        sc.close();\n\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            // Check if abbreviation (all uppercase)\n            if (word.equals(word.toUpperCase())) {\n                result.append(word).append(\" \");\n            } else {\n                // Convert to Title Case (first letter uppercase + rest as is)\n                if (word.length() > 0) {\n                    String formatted = word.substring(0, 1).toUpperCase() + word.substring(1);\n                    result.append(formatted).append(\" \");\n                }\n            }\n        }\n\n        System.out.println(result.toString().trim());\n    }\n}\n"
    },
    "111": {
        "question": "If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.\nNot all numbers produce palindromes so quickly. For example,\n349 + 943 = 1292,\n1292 + 2921 = 4213\n4213 + 3124 = 7337\nThat is, 349 took three iterations to arrive at a palindrome.\nAlthough  some numbers like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number.\nWrite a java program to take a number and check whether it is a  Lychrel number or not.\nIf a number is not Lychrel then print the number of iterations that it took to produce a palindrome.\nIf the number is Lychrel then print the 5th iteration\nNOTE: Check only till 10 iterations. If till 10 iterations you cannot find the palindrome then consider that number as Lychrel number. Use long datatype\nSample Input: 47\nSample Output: 1\nSample Input: 349\nSample Output: 3\nSample Input: 196\nSample Output: 196 is a Lychrel Number 5th iteration of number 196 is 52514",
        "answer": "import java.util.Scanner;\n\npublic class LychrelCheck {\n    \n    // Function to reverse a number\n    public static long reverse(long num) {\n        long rev = 0;\n        while (num > 0) {\n            rev = rev * 10 + num % 10;\n            num /= 10;\n        }\n        return rev;\n    }\n\n    // Function to check palindrome\n    public static boolean isPalindrome(long num) {\n        return num == reverse(num);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long num = sc.nextLong();\n        sc.close();\n\n        long temp = num;\n        int iteration = 0;\n        long fifthIterationValue = 0;\n        boolean foundPalindrome = false;\n\n        while (iteration < 10) {\n            long rev = reverse(temp);\n            temp = temp + rev;\n            iteration++;\n\n            if (iteration == 5) {\n                fifthIterationValue = temp;\n            }\n\n            if (isPalindrome(temp)) {\n                System.out.println(iteration); // Found palindrome\n                foundPalindrome = true;\n                break;\n            }\n        }\n\n        if (!foundPalindrome) {\n            System.out.println(num + \" is a Lychrel Number\");\n            System.out.println(\"5th iteration of number \" + num + \" is \" + fifthIterationValue);\n        }\n    }\n}\n"
    },
    "112": {
        "question": "A crazy number is a number in which the sum of the digits to the power of their\nrespective position is equal to the number itself.\nEg :  135 : = 1^1 + 3^2 + 5^3  = 1 +9 +125 = 135.   Hence 135 is a crazy number\nDesign a class Crazy to check if a given number is a crazy number or not.  Some fo the members of the class are given below:\nClass name:Crazy\nData memebrs/instance variables:\nnum:integer to store the number\nsize:stores the size of the number\nMethods/Member functions:Crazy (int nn):parameterized constructor to initialize num to nn and size to 0\nvoid sizeDigit():counts the total number of digits and assigns it to size\nint SumDigit(int n, int p):returns the sum of digits of the number (n) to the power of theri respectve position (p) \nvoid check():checks whether the number is a Crazy number by calling sumDigit and display the result with appropriate message(num is/is not a crazy number)",
        "answer": "import java.util.Scanner;\n\nclass Crazy {\n    private int num;   // number\n    private int size;  // number of digits\n\n    // Constructor\n    Crazy(int nn) {\n        num = nn;\n        size = 0;\n    }\n\n    // Method to count digits\n    void sizeDigit() {\n        int temp = num;\n        while (temp > 0) {\n            size++;\n            temp /= 10;\n        }\n    }\n\n    // Method to calculate sum of digits^position\n    int SumDigit(int n, int p) {\n        int sum = 0;\n        String s = String.valueOf(n); // Convert to string for digit positions\n        for (int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0'; // extract digit\n            int pos = i + 1; // position (1-based)\n            sum += Math.pow(digit, pos);\n        }\n        return sum;\n    }\n\n    // Method to check crazy number\n    void check() {\n        sizeDigit();\n        int result = SumDigit(num, size);\n        if (result == num) {\n            System.out.println(num + \" is a Crazy number\");\n        } else {\n            System.out.println(num + \" is not a Crazy number\");\n        }\n    }\n}\n\npublic class CrazyNumberCheck {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = sc.nextInt();\n\n        Crazy obj = new Crazy(n);\n        obj.check();\n    }\n}\n"
    },
    "113": {
        "question": "Given an unsorted array of integers, find the length of the longest consecutive elements sequence.\nFor example:\n Given [100, 4, 200, 1, 3, 2], the longest consecutive elements sequence should be [1, 2, 3, 4]. Solve the problem without using sorting algorithm for given array.\nInput: \nfirst line will be length of an array N\nnext N line will contain values for that array.\nOutput:\nLength of consecutive elements sequence\nSample Input:\n100 4 200 1 3 2\nSample Output:\n4\nExplanation: The longest consecutive chain which can be formed is 1 2 3 4 and its length is 4.",
        "answer": "import java.util.*;\n\npublic class LongestConsecutiveSequence {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Read full line of input\n        String[] tokens = sc.nextLine().split(\" \");\n        int[] arr = new int[tokens.length];\n\n        for (int i = 0; i < tokens.length; i++) {\n            arr[i] = Integer.parseInt(tokens[i]);\n        }\n\n        System.out.println(longestConsecutive(arr));\n    }\n\n    public static int longestConsecutive(int[] nums) {\n        if (nums.length == 0) return 0;\n\n        HashSet<Integer> set = new HashSet<>();\n        for (int num : nums) {\n            set.add(num);\n        }\n\n        int longest = 0;\n\n        for (int num : nums) {\n            // Check only when num is start of a sequence\n            if (!set.contains(num - 1)) {\n                int currentNum = num;\n                int count = 1;\n\n                while (set.contains(currentNum + 1)) {\n                    currentNum++;\n                    count++;\n                }\n\n                longest = Math.max(longest, count);\n            }\n        }\n\n        return longest;\n    }\n}\n"
    },
    "114": {
        "question": "Write a program to calculate the Gain which will take three inputs- the actual cost of the item, the cost to repair and the selling price of that item and it will print the net gain and gain percentage after selling the item.\n\n\n\n\nSample Input:\n\n240\n\n45\n\n350\n\n\n\n\nSample Output:\n\n65\n\n22.81",
        "answer": "import java.util.Scanner;\n\npublic class GainCalculator {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // Input\n        double actualCost = sc.nextDouble();\n        double repairCost = sc.nextDouble();\n        double sellingPrice = sc.nextDouble();\n\n        // Total cost price\n        double costPrice = actualCost + repairCost;\n\n        // Net gain\n        double gain = sellingPrice - costPrice;\n\n        // Gain percentage\n        double gainPercent = (gain / costPrice) * 100;\n\n        // Output\n        System.out.println((int)gain); \n        System.out.printf(\"%.2f\", gainPercent);\n    }\n}\n"
    },
    "115": {
        "question": "Write a program to take a string input and print all the characters. Skip printing of a character if it has already been printed. So no letters in the output should be repeated.\n\nNote: space and special characters are also characters in the string.\n\n\n\n\nExample 1:-\n\nInput: This iS a Sample input line of text\n\nOutput: This amplenutofx\n\n\n\n\nExample 2:-\n\nInput: This is a cat\n\nOutput: This ac",
        "answer": "import java.util.*;\n\npublic class UniqueCharacters {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n\n        // To track printed characters\n        Set<Character> seen = new HashSet<>();\n\n        StringBuilder result = new StringBuilder();\n\n        for (char c : input.toCharArray()) {\n            if (!seen.contains(c)) {\n                result.append(c);\n                seen.add(c);\n            }\n        }\n\n        // Output\n        System.out.println(result.toString());\n    }\n}\n"
    },
    "116": {
        "question": "The Roman numerals follow this basic pattern, 1000 = M, 900 = CM, 500 = D, 400 = CD, 100 = C, 90 = XC, 50 = L, 40 = XL, 10 = X, 9 = IX, 5 = V, 4 = IV, 1 = I The symbols “I”, “X”, “C”, and “M” can be repeated three times in succession, but no more. i.e. 234 can be represented as CCXXXIV, but 244 cannot be written as CCXXXXIV [Since we cannot repeat X more than 3 times successively]. (They may only appear more than three times if they appear non-sequentially, such as XXXIX.). “D”, “L”, and “V” can never be repeated. Write a program in Java to find the decimal equivalent of a given Roman number entered by the user. Validate the Roman numeral as per above definition.\n\nInput Specification: The first line contains a Roman numeral as defined above\n\nOutput Specification: Decimal equivalent of the Roman numeral or \"XXXX is an invalid input\"\n\nSample Input - 1:\n\nCCXXXIV\n\nSample Output - 1:\n\n234\n\n\n\n\nSample Input - 2:\n\nDCCCLXIII\n\nSample Output - 2:\n\n863\n\n\n\n\nSample Input - 3:\n\nCCLXA\n\nSample Output - 3:\n\nCCLXA is an invalid input",
        "answer": "import java.util.*;\n\npublic class RomanToDecimal {\n    \n    // Map of Roman values\n    private static final Map<Character, Integer> romanMap = new HashMap<>();\n    static {\n        romanMap.put('I', 1);\n        romanMap.put('V', 5);\n        romanMap.put('X', 10);\n        romanMap.put('L', 50);\n        romanMap.put('C', 100);\n        romanMap.put('D', 500);\n        romanMap.put('M', 1000);\n    }\n\n    // Method to check if Roman numeral is valid\n    private static boolean isValidRoman(String s) {\n        // Check for invalid characters\n        for (char c : s.toCharArray()) {\n            if (!romanMap.containsKey(c)) return false;\n        }\n\n        // Check repetition rules\n        if (s.matches(\".*(IIII|XXXX|CCCC|MMMM).*\")) return false; // can't repeat >3\n        if (s.matches(\".*(VV|LL|DD).*\")) return false;           // V, L, D can't repeat\n\n        // Check invalid subtractive combinations\n        if (s.matches(\".*IL|IC|ID|IM.*\")) return false;\n        if (s.matches(\".*VX|VL|VC|VD|VM.*\")) return false;\n        if (s.matches(\".*XD|XM.*\")) return false;\n        if (s.matches(\".*LC|LD|LM.*\")) return false;\n        if (s.matches(\".*DM.*\")) return false;\n\n        return true;\n    }\n\n    // Convert Roman to Decimal\n    private static int romanToDecimal(String s) {\n        int n = s.length();\n        int total = 0;\n\n        for (int i = 0; i < n; i++) {\n            int value = romanMap.get(s.charAt(i));\n\n            if (i + 1 < n && romanMap.get(s.charAt(i + 1)) > value) {\n                total -= value;  // subtractive case\n            } else {\n                total += value;\n            }\n        }\n        return total;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String roman = sc.nextLine().trim();\n\n        if (!isValidRoman(roman)) {\n            System.out.println(roman + \" is an invalid input\");\n        } else {\n            int result = romanToDecimal(roman);\n            System.out.println(result);\n        }\n    }\n}\n"
    },
    "117": {
        "question": "Question :  \nA happy number is a number in which the eventual sum of the square of the digits of the number is equal to 1.\nExample:\n28 28 = 2 square + 8 square = 4+64 = 68\n68 = 6 square + 8 square = 36 + 64 = 100\n100 = 1 square + 0 square + 0 square = 1+0+0 = 1\nHence, 28 is a happy number.\nExample 2 :\n12 12 = 1 square + 2 square = 1 + 4 = 5\nHence, 12 is not a happy number.\nWrite a java program to check if a given number is a happy number or not.\nSample Input : \n28\nSample Output: \n28 is a happy number\nSample Input :\n12\nSample Output:\n12 is not a happy number",
        "answer": "import java.util.*;\n\npublic class HappyNumber {\n    \n    // Method to calculate sum of squares of digits\n    private static int sumOfSquares(int n) {\n        int sum = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            sum += digit * digit;\n            n /= 10;\n        }\n        return sum;\n    }\n\n    // Method to check happy number\n    public static boolean isHappy(int n) {\n        Set<Integer> seen = new HashSet<>();  // to detect loops\n        while (n != 1 && !seen.contains(n)) {\n            seen.add(n);\n            n = sumOfSquares(n);\n        }\n        return n == 1;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int num = sc.nextInt();\n\n        if (isHappy(num)) {\n            System.out.println(num + \" is a happy number\");\n        } else {\n            System.out.println(num + \" is not a happy number\");\n        }\n    }\n}\n"
    },
    "118": {
        "question": "Find the sum of the factors of a number including 1 and the given number.\n\n\n\n\nInput specification:\n\nNumber of test cases T\n\nfollowed by T lines of number n.\n\n0 < T <= 5000 0 < n <= 999999999\n\nNote: The number will not have a very large prime factor.\n\n\n\n\nOutput specification:\n\nThe sum of the factors for each test case.\n\n\n\n\nExample:\n\nInput:\n\n2\n\n6\n\n5\n\n\n\n\nOutput:\n\n12\n\n6",
        "answer": "import java.util.*;\n\npublic class SumOfFactors {\n    \n    // Method to calculate sum of factors of n\n    public static long sumOfFactors(int n) {\n        long sum = 0;\n        int sqrt = (int)Math.sqrt(n);\n        \n        for (int i = 1; i <= sqrt; i++) {\n            if (n % i == 0) {\n                sum += i; // add divisor\n                if (i != n / i) { // avoid adding sqrt twice\n                    sum += n / i;\n                }\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        \n        while (T-- > 0) {\n            int n = sc.nextInt();\n            System.out.println(sumOfFactors(n));\n        }\n    }\n}\n"
    }
}